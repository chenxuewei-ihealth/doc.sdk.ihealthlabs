"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5140],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),f=r,m=p["".concat(s,".").concat(f)]||p[f]||u[f]||o;return n?a.createElement(m,i(i({ref:t},c),{},{components:n})):a.createElement(m,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},9336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const o={title:"BP7S",sidebar_position:5},i=void 0,l={unversionedId:"react-native/blood_pressure/bp7s",id:"react-native/blood_pressure/bp7s",title:"BP7S",description:"API Reference",source:"@site/docs/react-native/blood_pressure/bp7s.md",sourceDirName:"react-native/blood_pressure",slug:"/react-native/blood_pressure/bp7s",permalink:"/ihealthlabs-sdk-docs/docs/react-native/blood_pressure/bp7s",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/react-native/blood_pressure/bp7s.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"BP7S",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"BP7",permalink:"/ihealthlabs-sdk-docs/docs/react-native/blood_pressure/bp7"},next:{title:"KN550",permalink:"/ihealthlabs-sdk-docs/docs/react-native/blood_pressure/kn550"}},s={},d=[{value:"API Reference",id:"api-reference",level:2},{value:"Import BP7S Module",id:"import-bp7s-module",level:3},{value:"Add and remove listener",id:"add-and-remove-listener",level:3},{value:"get battery",id:"get-battery",level:3},{value:"set unit",id:"set-unit",level:3},{value:"get quantity of data stored in the bp5 device",id:"get-quantity-of-data-stored-in-the-bp5-device",level:3},{value:"get data stored in the bp5 device",id:"get-data-stored-in-the-bp5-device",level:3},{value:"disconnect device",id:"disconnect-device",level:3},{value:"set angle range",id:"set-angle-range",level:3},{value:"get bp7s device information",id:"get-bp7s-device-information",level:3},{value:"get all connected devices",id:"get-all-connected-devices",level:3}],c={toc:d};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"import-bp7s-module"},"Import BP7S Module"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  BP7SModule,\n  BPProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,r.kt)("h3",{id:"add-and-remove-listener"},"Add and remove listener"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(BP7SModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,r.kt)("h3",{id:"get-battery"},"get battery"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"BP7SModule.getBattery(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(BP7SModule.Event_Notify,  (event) => {\n    if (event.action === BPProfileModule.ACTION_BATTERY_BP) {\n        console.log(event[BPProfileModule.BATTERY_BP]);\n    }\n});\n")),(0,r.kt)("h3",{id:"set-unit"},"set unit"),(0,r.kt)("p",null,"The API can change the unit of the bg5 display."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'// unit :0 mmHg;1 kPa\nBP7SModule.setUnit(mac, 1);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(BP7SModule.Event_Notify,  (event) => {\n    if (event.action === BPProfileModule.ACTION_SET_UNIT_SUCCESS_BP) {\n        console.log("set Unit");\n    }\n});\n')),(0,r.kt)("h3",{id:"get-quantity-of-data-stored-in-the-bp5-device"},"get quantity of data stored in the bp5 device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"BP7SModule.getOfflineNum(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(BP7SModule.Event_Notify,  (event) => {\n    if (e.action === BPProfileModule.ACTION_HISTORICAL_NUM_BP) {\n        console.log(event[BPProfileModule.HISTORICAL_NUM_BP]);\n    }\n});\n")),(0,r.kt)("h3",{id:"get-data-stored-in-the-bp5-device"},"get data stored in the bp5 device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'BP7SModule.getOfflineData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(BP7SModule.Event_Notify,  (event) => {\n    if (e.action === BPProfileModule.ACTION_HISTORICAL_DATA_BP) {\n        let dataArray = event[BPProfileModule.HISTORICAL_DATA_BP];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n\n                console.log(offlineData[BPProfileModule.MEASUREMENT_DATE_BP]);\n                console.log(offlineData[BPProfileModule.HIGH_BLOOD_PRESSURE_BP]);\n                console.log(offlineData[BPProfileModule.LOW_BLOOD_PRESSURE_BP]);\n                console.log(offlineData[BPProfileModule.PULSE_BP]);\n                console.log(offlineData[BPProfileModule.MEASUREMENT_AHR_BP]);\n                console.log(offlineData[BPProfileModule.MEASUREMENT_HSD_BP]);\n                console.log(offlineData[BPProfileModule.DATAID]);\n            }\n        }\n    }\n});\n')),(0,r.kt)("h3",{id:"disconnect-device"},"disconnect device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"BP7SModule.disConnect(mac);\n")),(0,r.kt)("h3",{id:"set-angle-range"},"set angle range"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * leftHigh  the maximum measure angle of left hand, the maximum value must less than 90\n * leftLow   the minimum measure angle of left hand, the minimum value must more than 0, and less than leftUpper\n * rightHigh the maximum measure angle of right hand, the maximum value must less than 90\n * leftLow   the minimum measure angle of right hand, the minimum value must more than 0, and less than rightUpper\n */\nBP7SModule.angleSet(mac, 80, 30, 80, 30);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(BP7SModule.Event_Notify,  (event) => {\n    if (e.action === BPProfileModule.ACTION_SET_ANGLE_SUCCESS_BP) {\n        console.log("set angle");\n    }\n});\n')),(0,r.kt)("h3",{id:"get-bp7s-device-information"},"get bp7s device information"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"BP7SModule.getFunctionInfo(mac);\n")),(0,r.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"BP7SModule.getAllConnectedDevices();\n")))}u.isMDXComponent=!0}}]);