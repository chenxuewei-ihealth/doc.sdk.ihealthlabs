"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5146],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=c(r),m=a,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(v,l(l({ref:t},u),{},{components:r})):n.createElement(v,l({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=r[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7663:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"BP3L",sidebar_position:1},l=void 0,i={unversionedId:"ios/blood_pressure/bp3l",id:"ios/blood_pressure/bp3l",title:"BP3L",description:"WorkFlow",source:"@site/docs/ios/blood_pressure/bp3l.md",sourceDirName:"ios/blood_pressure",slug:"/ios/blood_pressure/bp3l",permalink:"/ihealthlabs-sdk-docs/docs/ios/blood_pressure/bp3l",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ios/blood_pressure/bp3l.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"BP3L",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Get started",permalink:"/ihealthlabs-sdk-docs/docs/ios/quickstart"},next:{title:"BP5",permalink:"/ihealthlabs-sdk-docs/docs/ios/blood_pressure/bp5"}},s={},c=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:4},{value:"2.Scan for BP3L devices",id:"2scan-for-bp3l-devices",level:3},{value:"3.Connect to BP3L devices",id:"3connect-to-bp3l-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Get the device battery",id:"get-the-device-battery",level:3},{value:"Start a measurement",id:"start-a-measurement",level:3},{value:"Stop measurement",id:"stop-measurement",level:3}],u={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"workflow"},"WorkFlow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Scan and connect BP3L blood pressure monitor.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"BP3L only support online measurement."))),(0,a.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,a.kt)("h4",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDiscover:) name:BP3LDiscover object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnectFail:) name:BP3LConnectFailed object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnect:) name:BP3LConnectNoti object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDisConnect:) name:BP3LDisConnectNoti object:nil];\n            \n            \n[BP3LController shareBP3LController];\n")),(0,a.kt)("h3",{id:"2scan-for-bp3l-devices"},"2.Scan for BP3L devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"[[ScanDeviceController commandGetInstance] commandScanDeviceType:HealthDeviceType_BP3L];\n")),(0,a.kt)("h3",{id:"3connect-to-bp3l-devices"},"3.Connect to BP3L devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"[[ConnectDeviceController commandGetInstance] commandContectDeviceWithDeviceType:HealthDeviceType_BP3L andSerialNub:deviceMac];\n")),(0,a.kt)("h2",{id:"api-reference"},"API reference"),(0,a.kt)("h3",{id:"get-the-device-battery"},"Get the device battery"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Query battery remaining energy\n * @param energyValue  A block to return the device battery remaining energy percentage, \u201880\u2019 stands for 80%.\n * @param error  A block to return the error in \u2018Establish measurement connection\u2019.\n */\n-(void)commandEnergy:(BlockEnergyValue)energyValue errorBlock:(BlockError)error;\n")),(0,a.kt)("h3",{id:"start-a-measurement"},"Start a measurement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Establish measurement connection and start BP measurement.\n * @param blockZeroState Zeroing state\n * @param pressure  Pressure value in the process of measurement, the unit is \u2018mmHg\u2019.\n * @param blockWaveletWithHeartbeat   Wavelet data set with heart beat.\n * @param blockWaveletWithoutHeartbeat   Wavelet data set without heart beat.\n * @param result   result of the measurement, including systolic pressure, diastolic pressure, pulse rate and irregular judgment. Relevant key: time, sys, dia, heartRate, irregular. irregular will be 0 or 1.\n * @param error   Return error codes.\n */\n-(void)commandStartMeasureWithZeroingState:(BlockZero)blockZeroState pressure:(BlockPressure)pressure waveletWithHeartbeat:(BlockWavelet)blockWaveletWithHeartbeat waveletWithoutHeartbeat:(BlockWavelet)blockWaveletWithoutHeartbeat  result:(BlockMeasureResult)result errorBlock:(BlockError)error;\n")),(0,a.kt)("h3",{id:"stop-measurement"},"Stop measurement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Measurement termination and stop BP3L measurement\n * @param success  The block return means measurement has been terminated.\n * @param error  A block to return the error in \u2018Establish measurement connection\u2019 in BP3L.\n */\n-(void)stopBPMeassureSuccessBlock:(BlockSuccess)success errorBlock:(BlockError)error;\n")))}d.isMDXComponent=!0}}]);