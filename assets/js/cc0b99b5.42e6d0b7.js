"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[847],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),v=s(n),m=i,g=v["".concat(c,".").concat(m)]||v[m]||p[m]||r;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=v;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},1866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={title:"KN550",sidebar_position:6},o=void 0,l={unversionedId:"android/blood_pressure/kn550",id:"android/blood_pressure/kn550",title:"KN550",description:"1. Scan and connect KN-550BT blood pressure monitor.",source:"@site/docs/android/blood_pressure/kn550.mdx",sourceDirName:"android/blood_pressure",slug:"/android/blood_pressure/kn550",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kn550",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_pressure/kn550.mdx",tags:[],version:"current",sidebarPosition:6,frontMatter:{title:"KN550",sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"BP7S",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/bp7s"},next:{title:"KD723",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kd723"}},c={},s=[{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for KN-550BT devices",id:"2scan-for-kn-550bt-devices",level:3},{value:"3.Connect to KN-550BT devices",id:"3connect-to-kn-550bt-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Get device battery",id:"get-device-battery",level:3},{value:"Get number of history data",id:"get-number-of-history-data",level:3},{value:"Get history data",id:"get-history-data",level:3},{value:"Set local time to KN-550BT",id:"set-local-time-to-kn-550bt",level:3},{value:"Get KN-550BT display status",id:"get-kn-550bt-display-status",level:3},{value:"Set KN-550BT display status",id:"set-kn-550bt-display-status",level:3},{value:"Get KN-550BT time",id:"get-kn-550bt-time",level:3},{value:"History data transfer finished",id:"history-data-transfer-finished",level:3},{value:"Disconnect KN-550BT device",id:"disconnect-kn-550bt-device",level:3}],d={toc:s};function p(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol"},"Scan and connect KN-550BT blood pressure monitor."),(0,i.kt)("li",{parentName:"ol"},"KN-550BT only support offline measurement.")))),(0,i.kt)("p",null,(0,i.kt)("img",{alt:"kn550bt workflow",src:n(4249).Z,width:"1063",height:"711"})),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_550BT);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-kn-550bt-devices"},"2.Scan for KN-550BT devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.BP550BT);\n")),(0,i.kt)("h3",{id:"3connect-to-kn-550bt-devices"},"3.Connect to KN-550BT devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_550BT);\n\nBp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\n')),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-device-battery"},"Get device battery"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"The KN-550BT doesn't support this feature on firmware 2.0.0."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getBattery();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_BATTERY_BP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(BpProfile.BATTERY_BP);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-number-of-history-data"},"Get number of history data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getOfflineNum();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_HISTORICAL_NUM_BP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int count = obj.getInt(BpProfile.HISTORICAL_NUM_BP);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-history-data"},"Get history data"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"When user use KN-550BT first time and don't set time yet, the device time is not correct.\nand the returned data will contain whether the time need to be set. Version 2.0.1 or above support this feature."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getOfflineData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.HISTORICAL_DATA_BP.equals(action)) {\n            try {\n                JSONArray historyArr = new JSONArray(message);\n                for (int i = 0; i < historyArr.length(); i++) {\n                    JSONObject obj = historyArr.getJSONObject(i);\n                    String time    = obj.getString(BpProfile.MEASUREMENT_DATE_BP);\n                    int sys        = obj.getInt(BpProfile.HIGH_BLOOD_PRESSURE_BP)\n                    int dia        = obj.getInt(BpProfile.LOW_BLOOD_PRESSURE_BP)\n                    int heartRate  = obj.getInt(BpProfile.PULSE_BP)\n                    int ahr        = obj.getInt(BpProfile.MEASUREMENT_AHR_BP)\n                    int hsd        = obj.getInt(BpProfile.MEASUREMENT_HSD_BP)\n                    \n                    // only support firmware 2.0.1 or later\n                    int timeCalibration = obj.getInt(BpProfile.TIME_CALIBRATION)\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-local-time-to-kn-550bt"},"Set local time to KN-550BT"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getFunctionInfo();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_FUNCTION_INFORMATION_BP.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               \n               /**\n                * Blood pressure measurement mode, up air measurement mode and down air measurement mode.\n                * Up air measurement mode: measure blood pressure during the process of pressurization.\n                * Down air measurement mode: raise the pressure to a certain leven and then slowly release it to measure blood pressure.\n                * upAirMeasureFlg, true: up air measurement mode; false: down dir measurement mode.\n                */\n               Boolean upAirMeasureFlg = obj.getBoolean(BpProfile.FUNCTION_IS_UPAIR_MEASURE);\n               \n               /**\n                * It is used for measuring blood pressure on the arm or not.\n                */\n               Boolean armMeasureFlg = obj.getBoolean(BpProfile.FUNCTION_IS_ARM_MEASURE);\n               \n               /**\n                * \n                */\n               Boolean haveAngleSensorFlg = obj.getBoolean(BpProfile.FUNCTION_HAVE_ANGLE_SENSOR);\n               \n               /**\n                * It support offline measurement mode or not.\n                */\n               Boolean haveOfflineFlg = obj.getBoolean(BpProfile.FUNCTION_HAVE_OFFLINE);\n               \n               /**\n                * It support diagnosis of hemodynamic stability or not. It is always false for KN-550BT.\n                */\n               Boolean haveHSDFlg = obj.getBoolean(BpProfile.FUNCTION_HAVE_HSD);\n               \n               /**\n                * It support angle detection or not. It is always false for KN-550BT.\n                */\n               Boolean haveAngleSetFlg = obj.getBoolean(BpProfile.FUNCTION_HAVE_ANGLE_SETTING);\n               \n               /**\n                *  It support update firmware or not. It is always false for KN-550BT.\n                */\n               Boolean selfUpdateFlg = obj.getBoolean(BpProfile.FUNCTION_HAVE_SELF_UPDATE);\n\n            } catch(JSONException e) {\n                e.printStackTrace();\n            }\n        } \n    } \n}\n")),(0,i.kt)("h3",{id:"get-kn-550bt-display-status"},"Get KN-550BT display status"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getStatusOfDisplay();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_SHOW_CONFIG_BP.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               Boolean isBackLightOn = obj.getBoolean(BpProfile.IS_BACKLIGHT_ON_BP);\n               Boolean isClockOn     = obj.getBoolean(BpProfile.IS_CLOCK_ON_BP);\n               \n            } catch(JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-kn-550bt-display-status"},"Set KN-550BT display status"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getStatusOfDisplay();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_SET_STATUS_DISPLAY_SUCCESS.equals(action)) {\n            Log.i("set display success");\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"get-kn-550bt-time"},"Get KN-550BT time"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only Firmware 2.0.1 and above supprt this API"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.getTime();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_GET_TIME.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               String time = obj.getString("Time");\n               \n            } catch(JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (BpProfile.ACTION_ERROR_BP.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               int errorId = obj.getInt(BpProfile.ERROR_NUM_BP);\n               String errorMessage = obj.getString(BpProfile.ERROR_DESCRIPTION_BP);\n               Log.e("", "the API is unsupported");\n               \n            } catch(JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"history-data-transfer-finished"},"History data transfer finished"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"After history data transfer is finished, this API will help you to clear the history data.\nOnly Firmware 2.0.1 and above supprt this API. other firmware KN-550BT can clear history data automatically."))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.transferFinished();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_HISTORICAL_OVER_BP.equals(action)) {\n            Log.i("", "Data transfer is finished!");\n\n        } else if (BpProfile.ACTION_ERROR_BP.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               int errorId = obj.getInt(BpProfile.ERROR_NUM_BP);\n               String errorMessage = obj.getString(BpProfile.ERROR_DESCRIPTION_BP);\n               Log.e("", "the API is unsupported");\n               \n            } catch(JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"disconnect-kn-550bt-device"},"Disconnect KN-550BT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp550BTControl control = iHealthDevicesManager.getInstance().getBp550BTControl(mDeviceMac);\ncontrol.disconnect();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n     @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData) { \n        if (iHealthDevicesManager.DEVICE_STATE_DISCONNECTED == status) {\n            Log.i("The device is disconnected");\n        }\n    }\n}\n')))}p.isMDXComponent=!0},4249:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/kn550bt_workflow-23572063e500e8ed73bdb436b67ccd60.png"}}]);