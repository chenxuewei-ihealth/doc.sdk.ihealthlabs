"use strict";(self.webpackChunksdk_docs=self.webpackChunksdk_docs||[]).push([[6836],{3905:function(e,o,n){n.d(o,{Zo:function(){return d},kt:function(){return m}});var t=n(7294);function r(e,o,n){return o in e?Object.defineProperty(e,o,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[o]=n,e}function i(e,o){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);o&&(t=t.filter((function(o){return Object.getOwnPropertyDescriptor(e,o).enumerable}))),n.push.apply(n,t)}return n}function s(e){for(var o=1;o<arguments.length;o++){var n=null!=arguments[o]?arguments[o]:{};o%2?i(Object(n),!0).forEach((function(o){r(e,o,n[o])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(o){Object.defineProperty(e,o,Object.getOwnPropertyDescriptor(n,o))}))}return e}function c(e,o){if(null==e)return{};var n,t,r=function(e,o){if(null==e)return{};var n,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||(r[n]=e[n]);return r}(e,o);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)n=i[t],o.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var a=t.createContext({}),l=function(e){var o=t.useContext(a),n=o;return e&&(n="function"==typeof e?e(o):s(s({},o),e)),n},d=function(e){var o=l(e.components);return t.createElement(a.Provider,{value:o},e.children)},p={inlineCode:"code",wrapper:function(e){var o=e.children;return t.createElement(t.Fragment,{},o)}},u=t.forwardRef((function(e,o){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=r,f=u["".concat(a,".").concat(m)]||u[m]||p[m]||i;return n?t.createElement(f,s(s({ref:o},d),{},{components:n})):t.createElement(f,s({ref:o},d))}));function m(e,o){var n=arguments,r=o&&o.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=u;var c={};for(var a in o)hasOwnProperty.call(o,a)&&(c[a]=o[a]);c.originalType=e,c.mdxType="string"==typeof e?e:r,s[1]=c;for(var l=2;l<i;l++)s[l]=n[l];return t.createElement.apply(null,s)}return t.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6178:function(e,o,n){n.r(o),n.d(o,{contentTitle:function(){return a},default:function(){return u},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return d}});var t=n(7462),r=n(3366),i=(n(7294),n(3905)),s=["components"],c={title:"BG1S",sidebar_position:2},a=void 0,l={unversionedId:"blood_glucose/bg1s",id:"version-2.7.7/blood_glucose/bg1s",isDocsHomePage:!1,title:"BG1S",description:"WorkFlow",source:"@site/ios_versioned_docs/version-2.7.7/blood_glucose/bg1s.md",sourceDirName:"blood_glucose",slug:"/blood_glucose/bg1s",permalink:"/ihealthlabs-sdk-docs/ios/blood_glucose/bg1s",editUrl:"https://github.com/chenxuewei-ihealth/ihealthlabs-sdk-docs/tree/main/ios_versioned_docs/version-2.7.7/blood_glucose/bg1s.md",tags:[],version:"2.7.7",sidebarPosition:2,frontMatter:{title:"BG1S",sidebar_position:2},sidebar:"version-1.33.x/mainSidebar",previous:{title:"BG1",permalink:"/ihealthlabs-sdk-docs/ios/blood_glucose/bg1"},next:{title:"BG5",permalink:"/ihealthlabs-sdk-docs/ios/blood_glucose/bg5"}},d=[{value:"WorkFlow",id:"workflow",children:[]},{value:"Connection to device",id:"connection-to-device",children:[{value:"1.Listen to device notify",id:"1listen-to-device-notify",children:[]},{value:"2.Scan for BG1S devices",id:"2scan-for-bg1s-devices",children:[]},{value:"3.Connect to BG1S devices",id:"3connect-to-bg1s-devices",children:[]}]},{value:"API reference",id:"api-reference",children:[{value:"Get the measure mode of BG1S",id:"get-the-measure-mode-of-bg1s",children:[]},{value:"Set the measure mode of BG1S",id:"set-the-measure-mode-of-bg1s",children:[]},{value:"Get the device code of BG1S",id:"get-the-device-code-of-bg1s",children:[]},{value:"Set the device code of BG1S",id:"set-the-device-code-of-bg1s",children:[]},{value:"Disconnect",id:"disconnect",children:[]}]}],p={toc:d};function u(e){var o=e.components,n=(0,r.Z)(e,s);return(0,i.kt)("wrapper",(0,t.Z)({},p,n,{components:o,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"workflow"},"WorkFlow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect BG1S blood glucose monitor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"BG1S only support online measurement."))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDiscover:) name:BG1SDiscover object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnectFail:) name:BG1SConnectFailed object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnect:) name:BG1SConnectNoti object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDisConnect:) name:BG1SDisConnectNoti object:nil];\n            \n[BG1SController shareIHBG1SController];\n")),(0,i.kt)("h3",{id:"2scan-for-bg1s-devices"},"2.Scan for BG1S devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"[[ScanDeviceController commandGetInstance] commandScanDeviceType:HealthDeviceType_BG1S];\n")),(0,i.kt)("h3",{id:"3connect-to-bg1s-devices"},"3.Connect to BG1S devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"[[ConnectDeviceController commandGetInstance] commandContectDeviceWithDeviceType:HealthDeviceType_BG1S andSerialNub:deviceMac];\n")),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-the-measure-mode-of-bg1s"},"Get the measure mode of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Get device battary\n * @param function  A block to return the function and states that the device supports.\n * @param disposeBGErrorBlock  A block to refer \u2018error\u2019 in \u2018Establish measurement connection\u2019 in BG1S.\n */\n-(void)commandFunction:(BlockBG1SDeviceFunction)function DisposeBGErrorBlock:(BlockBG1SError)disposeBGErrorBlock;\n")),(0,i.kt)("h3",{id:"set-the-measure-mode-of-bg1s"},"Set the measure mode of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Button-pressing booting mode\n * @param testMode  Set the measurement mode,must be the same as the testType in send code method, BGMeasureMode_Blood means blood measurement mode, BGMeasureMode_NoBlood means control solution measurement mode.\n * @param disposeBGStripInBlock  This block returns yes means strip slides in.\n * @param disposeBGBloodBlock This block returns yes means the blood drop has beed sensed from the strip.\n * @param disposeBGResultBlock  This block returns the measurement by the unit of mg/dL, range from 20-600.\n * @param disposeBGErrorBlock   This block returns error codes,please refer to error codes list in BGMacroFile.\n */\n-(void)commandCreateBG1STestModel:(BGMeasureMode)testMode\n          DisposeBGStripInBlock:(DisposeBG1SStripInBlock)disposeBGStripInBlock\n            DisposeBGBloodBlock:(DisposeBGBloodBlock)disposeBGBloodBlock\n           DisposeBGResultBlock:(DisposeBGResultBlock)disposeBGResultBlock\n            DisposeBGErrorBlock:(BlockBG1SError)disposeBGErrorBlock;\n")),(0,i.kt)("h3",{id:"get-the-device-code-of-bg1s"},"Get the device code of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n* Read the information of the strip from the BG meter\n* @param  disposeBGCodeDic  This block returns the information of the strip, Strips means the number of strips which has been used, Date means expired date.\n* @param  disposeBGErrorBlock  This block returns error codes,please refer to error codes list in BGMacroFile.\n*/\n-(void)commandReadBGCodeDic:(DisposeBGCodeDic)disposeBGCodeDic\n        DisposeBGErrorBlock:(BlockBG1SError)disposeBGErrorBlock;\n")),(0,i.kt)("h3",{id:"set-the-device-code-of-bg1s"},"Set the device code of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Send code\n\n * @param encodeString  The code String gets by scanning the QR code. Only used when codetype is GOD\n \n * @param disposeBGSendCodeBlock  YES means success, NO means fail.\n\n * @param disposeBGErrorBlock This block returns error codes,please refer to error codes list in BGMacroFile.\n */\n-(void)commandSendBGCodeWithCodeString:(NSString*)encodeString DisposeBGSendCodeBlock:(DisposeBGSendCodeBlock)disposeBGSendCodeBlock DisposeBGErrorBlock:(BlockBG1SError)disposeBGErrorBlock;\n")),(0,i.kt)("h3",{id:"disconnect"},"Disconnect"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Disconnect current device\n */\n-(void)commandDisconnectDevice;\n")))}u.isMDXComponent=!0}}]);