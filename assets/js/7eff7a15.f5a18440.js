"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[1208],{3905:function(e,t,o){o.d(t,{Zo:function(){return d},kt:function(){return m}});var n=o(7294);function r(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,n)}return o}function c(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){r(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function a(e,t){if(null==e)return{};var o,n,r=function(e,t){if(null==e)return{};var o,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||(r[o]=e[o]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)o=i[n],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(r[o]=e[o])}return r}var s=n.createContext({}),l=function(e){var t=n.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):c(c({},t),e)),o},d=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var o=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),p=l(o),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return o?n.createElement(f,c(c({ref:t},d),{},{components:o})):n.createElement(f,c({ref:t},d))}));function m(e,t){var o=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=o.length,c=new Array(i);c[0]=p;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:r,c[1]=a;for(var l=2;l<i;l++)c[l]=o[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,o)}p.displayName="MDXCreateElement"},121:function(e,t,o){o.r(t),o.d(t,{assets:function(){return d},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return a},metadata:function(){return l},toc:function(){return u}});var n=o(7462),r=o(3366),i=(o(7294),o(3905)),c=["components"],a={title:"BG1",sidebar_position:1},s=void 0,l={unversionedId:"ios/blood_glucose/bg1",id:"ios/blood_glucose/bg1",title:"BG1",description:"WorkFlow",source:"@site/docs/ios/blood_glucose/bg1.md",sourceDirName:"ios/blood_glucose",slug:"/ios/blood_glucose/bg1",permalink:"/ihealthlabs-sdk-docs/docs/ios/blood_glucose/bg1",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ios/blood_glucose/bg1.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"BG1",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"HS6",permalink:"/ihealthlabs-sdk-docs/docs/ios/scale/hs6"},next:{title:"BG1S",permalink:"/ihealthlabs-sdk-docs/docs/ios/blood_glucose/bg1s"}},d={},u=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for BG1 devices",id:"2scan-for-bg1-devices",level:3},{value:"3.Connect to BG1 devices",id:"3connect-to-bg1-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Parse bottle Info of the QRCode",id:"parse-bottle-info-of-the-qrcode",level:3},{value:"Send code to BG1 device",id:"send-code-to-bg1-device",level:3}],p={toc:u};function m(e){var t=e.components,o=(0,r.Z)(e,c);return(0,i.kt)("wrapper",(0,n.Z)({},p,o,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"workflow"},"WorkFlow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect BG1 blood glucose monitor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"BG1 only support online measurement."))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnect:) name:kNotificationNameNeedAudioPermission object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDisConnect:) name:kNotificationNameBG1DidDisConnect object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDiscover:) name:kNotificationNameAudioDeviceInsert object:nil];\n\n[[BG1Controller shareBG1Controller] initBGAudioModule];\n")),(0,i.kt)("h3",{id:"2scan-for-bg1-devices"},"2.Scan for BG1 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"[[BG1Controller shareBG1Controller] initBGAudioModule];\n")),(0,i.kt)("h3",{id:"3connect-to-bg1-devices"},"3.Connect to BG1 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Start connect BG1 and get the connection status.\n * @param BG1Model the BG1 type.\n * @param discover This block returns means blood glucose meter plugged in.\n * @param IDPSInfo  This block returns the IDPS of the meter, this will be operated for the first time when the app talks to the meter.\n * @param connect This block returns the connection status, the connection of the BG meter is regular , the measurement could be processed.\n * @param error block returns error codes,please refer to error codes list in BGMacroFile.\n * @Notice  Notice: Using this method should be placed kNotificationNameNeedAudioPermission callback\n */\n- (void)commandBG1DeviceModel:(NSNumber *)BG1Model withDiscoverBlock:(DisposeBG1DiscoverBlock)discover withDiscoverBlock:(DisposeBG1IDPSBlock)IDPSInfo withConnectBlock:(DisposeBG1ConnectBlock)connect withErrorBlock:(DisposeBG1ErrorBlock)error;\n")),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"parse-bottle-info-of-the-qrcode"},"Parse bottle Info of the QRCode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'/**\n Analyze code include bottleID\uff0cDueDate and the number of strips. Only Available for GOD Code\n \n @param encodeString The code String gets by scanning the QR code.\n @return return a dictionary contains keys such as @"BottleID",@"StripNum",@"DueDate"; return nil if input parameter is GDH code or code is invalid.\n */\n-(NSDictionary *)codeStripStrAnalysis:(NSString *)encodeString;\n')),(0,i.kt)("h3",{id:"send-code-to-bg1-device"},"Send code to BG1 device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Establish connection and start BG measurement.(New)\n * @param measureMode Set the measure test type,BGMeasureMode_Blood is Blood Test,BGMeasureMode_NoBlood is CTL Test.\n * @param codeMode Set the code type,BGCodeMode_GOD is GOD,BGCodeMode_GDH is GDH.\n * @param codeString The code String gets by scanning the QR code.\n * @param sendCodeResult   If the QR code is accepted, yes means accepted, no means deny.\n * @param stripIn The strips slide into the BG meter.\n * @param blood  The blood drop has beed sensed from the strip.\n * @param measureResult  Returns the measurement by the unit of mg/dL, range from 20-600.\n * @param stripOut  The strip has been pulled out.\n * @param error  This block returns error codes,please refer to error codes list in BGMacroFile.\n */\n- (void)commandBG1MeasureMode:(BGMeasureMode)measureMode withCodeMode:(BGCodeMode)codeMode withCodeString:(NSString *)codeString withSendCodeResultBlock:(DisposeBG1SendCodeResultBlock)sendCodeResult withStripInBlock:(DisposeBGStripInBlock)stripIn withBloodBlock:(DisposeBGBloodBlock)blood withResultBlock:(DisposeBGResultBlock)measureResult withStripOutBlock:(DisposeBGStripOutBlock)stripOut withErrorBlock:(DisposeBG1ErrorBlock)error;\n")))}m.isMDXComponent=!0}}]);