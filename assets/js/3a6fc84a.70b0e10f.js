"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2833],{3905:(e,t,n)=>{n.d(t,{Zo:()=>v,kt:()=>u});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var o=a.createContext({}),s=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},v=function(e){var t=s(e.components);return a.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,o=e.parentName,v=l(e,["components","mdxType","originalType","parentName"]),p=s(n),u=i,g=p["".concat(o,".").concat(u)]||p[u]||d[u]||r;return n?a.createElement(g,c(c({ref:t},v),{},{components:n})):a.createElement(g,c({ref:t},v))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,c=new Array(r);c[0]=p;var l={};for(var o in t)hasOwnProperty.call(t,o)&&(l[o]=t[o]);l.originalType=e,l.mdxType="string"==typeof e?e:i,c[1]=l;for(var s=2;s<r;s++)c[s]=n[s];return a.createElement.apply(null,c)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},6151:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const r={title:"PT3SBT",sidebar_position:3},c=void 0,l={unversionedId:"android/thermometer/pt3sbt",id:"android/thermometer/pt3sbt",title:"PT3SBT",description:"WorkFlow",source:"@site/docs/android/thermometer/pt3sbt.md",sourceDirName:"android/thermometer",slug:"/android/thermometer/pt3sbt",permalink:"/ihealthlabs-sdk-docs/docs/android/thermometer/pt3sbt",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/thermometer/pt3sbt.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"PT3SBT",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"TS28B",permalink:"/ihealthlabs-sdk-docs/docs/android/thermometer/ts28b"},next:{title:"AM3",permalink:"/ihealthlabs-sdk-docs/docs/android/tracker/am3"}},o={},s=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for PT3SBT devices",id:"2scan-for-pt3sbt-devices",level:3},{value:"3.Connect to PT3SBT devices",id:"3connect-to-pt3sbt-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Set time for PT3SBT device",id:"set-time-for-pt3sbt-device",level:3},{value:"Get battery for PT3SBT device",id:"get-battery-for-pt3sbt-device",level:3},{value:"Set unit for PT3SBT device",id:"set-unit-for-pt3sbt-device",level:3},{value:"Get unit for PT3SBT device",id:"get-unit-for-pt3sbt-device",level:3},{value:"Get count of history data for PT3SBT device",id:"get-count-of-history-data-for-pt3sbt-device",level:3},{value:"Get history data for PT3SBT device",id:"get-history-data-for-pt3sbt-device",level:3},{value:"Delete the history data from device",id:"delete-the-history-data-from-device",level:3},{value:"Notify measurement result",id:"notify-measurement-result",level:3}],v={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"workflow"},"WorkFlow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect PT3SBT.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"PT3SBT support online measurement and offine measurement."))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_PT3SBT);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-pt3sbt-devices"},"2.Scan for PT3SBT devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.PT3SBT);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { \n        Log.i(TAG, "onScanDevice - mac:" + mac + " - deviceType:" + deviceType + " - rssi:" + rssi + " - manufactorData:" + manufactorData);\n    }\n}\n')),(0,i.kt)("h3",{id:"3connect-to-pt3sbt-devices"},"3.Connect to PT3SBT devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_PT3SBT)\nPT3SBTControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\n')),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"set-time-for-pt3sbt-device"},"Set time for PT3SBT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Pt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.setTime();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_SET_TIME.equals(action)) {\n            Log.i("set time success");\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"get-battery-for-pt3sbt-device"},"Get battery for PT3SBT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Pt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.getBattery();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_GET_BATTERY.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(Pt3sbtProfile.BATTERY);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-unit-for-pt3sbt-device"},"Set unit for PT3SBT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/*\n * @param unit\n * PT3SBT_UNIT.Fahrenheit\n * PT3SBT_UNIT.Centigrade\n */\nPt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.setUnit(Pt3sbtProfile.PT3SBT_UNIT unit);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_SET_UNIT.equals(action)) {\n            Log.i("set unit success")\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"get-unit-for-pt3sbt-device"},"Get unit for PT3SBT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Pt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.getUnit();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_GET_UNIT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int unit = obj.getInt(Pt3sbtProfile.UNIT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-count-of-history-data-for-pt3sbt-device"},"Get count of history data for PT3SBT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Pt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.getHistoryCount();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_GET_HISTORY_COUNT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int count = obj.getInt(Pt3sbtProfile.COUNT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-history-data-for-pt3sbt-device"},"Get history data for PT3SBT device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Pt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.getHistoryData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_GET_HISTORY_DATA.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                JSONArray mHistoryArr = obj.getJSONArray(Pt3sbtProfile.HISTORY);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"delete-the-history-data-from-device"},"Delete the history data from device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Pt3sbtControl control = iHealthDevicesManager.getInstance().getPt3sbtDevice(mDeviceMac);\ncontrol.getBattery();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_DELETE_HISTORY_DATA.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String status = obj.getString(Pt3sbtProfile.STATUS);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"notify-measurement-result"},"Notify measurement result"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Pt3sbtProfile.ACTION_TEMPERATURE_MEASUREMENT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int temperature = obj.getString(Pt3sbtProfile.TEMPERATURE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")))}d.isMDXComponent=!0}}]);