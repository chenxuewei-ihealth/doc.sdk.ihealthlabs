"use strict";(self.webpackChunksdk_docs=self.webpackChunksdk_docs||[]).push([[593],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return p}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=r.createContext({}),s=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),g=s(t),p=o,v=g["".concat(l,".").concat(p)]||g[p]||u[p]||i;return t?r.createElement(v,a(a({ref:n},d),{},{components:t})):r.createElement(v,a({ref:n},d))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=g;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},7689:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return g},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],c={title:"BG1",sidebar_position:1},l=void 0,s={unversionedId:"blood_glucose/bg1",id:"version-2.9.9/blood_glucose/bg1",isDocsHomePage:!1,title:"BG1",description:"WorkFlow",source:"@site/android_versioned_docs/version-2.9.9/blood_glucose/bg1.md",sourceDirName:"blood_glucose",slug:"/blood_glucose/bg1",permalink:"/ihealthlabs-sdk-docs/android/blood_glucose/bg1",editUrl:"https://github.com/chenxuewei-ihealth/ihealthlabs-sdk-docs/tree/main/android_versioned_docs/version-2.9.9/blood_glucose/bg1.md",tags:[],version:"2.9.9",sidebarPosition:1,frontMatter:{title:"BG1",sidebar_position:1},sidebar:"version-2.9.9/mainSidebar",previous:{title:"HS6",permalink:"/ihealthlabs-sdk-docs/android/scale/hs6"},next:{title:"BG1S",permalink:"/ihealthlabs-sdk-docs/android/blood_glucose/bg1s"}},d=[{value:"WorkFlow",id:"workflow",children:[]},{value:"Connection to device",id:"connection-to-device",children:[{value:"1.Listen to device notify",id:"1listen-to-device-notify",children:[]},{value:"2.Scan for BG1 devices",id:"2scan-for-bg1-devices",children:[]},{value:"3.Connect to BG1 devices",id:"3connect-to-bg1-devices",children:[]}]},{value:"API reference",id:"api-reference",children:[{value:"Parse bottle Info of the QRCode",id:"parse-bottle-info-of-the-qrcode",children:[]},{value:"Send code to BG1 device",id:"send-code-to-bg1-device",children:[]},{value:"Start a measurement",id:"start-a-measurement",children:[]}]}],u={toc:d};function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"workflow"},"WorkFlow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect BG1 blood pressure monitor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"BG1 only support online measurement."))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_BG1);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-bg1-devices"},"2.Scan for BG1 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.BG1);\n")),(0,i.kt)("h3",{id:"3connect-to-bg1-devices"},"3.Connect to BG1 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_BG1)\n\nBg1Control control = iHealthDevicesManager.getInstance().getBg1Control(mDeviceMac);\n')),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"parse-bottle-info-of-the-qrcode"},"Parse bottle Info of the QRCode"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value: {"bottleInfo":[{"bottleId":"18882266","overDate":"2015-06-26","stripNum":"25"}]}\nString info = Bg1Control.getBottleInfoFromQR(String QRCode);\n')),(0,i.kt)("h3",{id:"send-code-to-bg1-device"},"Send code to BG1 device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1Control control = iHealthDevicesManager.getInstance().getBg1Control(mDeviceMac);\ncontrol.sendCode(String QRCode, int stripType, int measureType)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nBroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n    @Override\n    public void onReceive(Context context, Intent intent) { \n        String action = intent.getAction();\n        if (action.equals(Bg1Profile.ACTION_BG1_SENDCODE_RESULT)) {\n            int flag = intent.getIntExtra(Bg1Profile.BG1_SENDCODE_RESULT, -1);\n            Log.i( "sendCode flag = " + flag);\n            if (flag == 0) {\n                Log.i( "sendCode success,ready to measure");\n            } else {\n                Log.i( "sendCode failed");\n                mBg1Control.disconnect();\n            }\n        }\n    }\n}\n')),(0,i.kt)("h3",{id:"start-a-measurement"},"Start a measurement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nBroadcastReceiver mBroadcastReceiver = new BroadcastReceiver() {\n    @Override\n    public void onReceive(Context context, Intent intent) { \n        String action = intent.getAction();\n        if (action.equals(Bg1Profile.ACTION_BG1_MEASURE_STRIP_IN)) {\n            Log.i( "test strip in");\n\n        } else if (action.equals(Bg1Profile.ACTION_BG1_MEASURE_GET_BLOOD)) {\n            Log.i( "drop blood");\n\n        } else if (action.equals(Bg1Profile.ACTION_BG1_MEASURE_RESULT)) {\n           try {\n                JSONObject obj = new JSONObject(message);\n                int value = obj.getInt(Bg1Profile.BG1_MEASURE_RESULT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n\n        } else if (action.equals(Bg1Profile.ACTION_BG1_MEASURE_ERROR)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int error_id = obj.getInt(Bg1Profile.BG1_MEASURE_ERROR);\n                String error_message = obj.getInt(Bg1Profile.BG1_MEASURE_ERROR_DESCRIPTION);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n\n        } else if (action.equals(Bg1Profile.ACTION_BG1_MEASURE_STRIP_OUT)) {\n            Log.i( "test strip out");\n        }\n    }\n}\n')))}g.isMDXComponent=!0}}]);