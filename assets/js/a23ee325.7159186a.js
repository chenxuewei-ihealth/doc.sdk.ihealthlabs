"use strict";(self.webpackChunkdoc_sdk=self.webpackChunkdoc_sdk||[]).push([[505],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return p}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),m=d(n),p=a,v=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return n?r.createElement(v,c(c({ref:t},s),{},{components:n})):r.createElement(v,c({ref:t},s))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var d=2;d<o;d++)c[d]=n[d];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4979:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return d},toc:function(){return s},default:function(){return m}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),c=["components"],i={},l="ECG3",d={unversionedId:"device/ecg",id:"device/ecg",isDocsHomePage:!1,title:"ECG3",description:"import ECG3 module",source:"@site/docs/device/ecg.md",sourceDirName:"device",slug:"/device/ecg",permalink:"/doc.sdk.ihealthlabs/docs/device/ecg",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/device/ecg.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BP7S",permalink:"/doc.sdk.ihealthlabs/docs/device/bp7s"},next:{title:"ECG3",permalink:"/doc.sdk.ihealthlabs/docs/device/ecgusb"}},s=[{value:"import ECG3 module",id:"import-ecg3-module",children:[]},{value:"APIs",id:"apis",children:[{value:"add and remove listener",id:"add-and-remove-listener",children:[]},{value:"get all connected devices",id:"get-all-connected-devices",children:[]},{value:"start a measurement",id:"start-a-measurement",children:[]},{value:"cancel a measurement",id:"cancel-a-measurement",children:[]},{value:"get battery",id:"get-battery",children:[]},{value:"set current time to device",id:"set-current-time-to-device",children:[]}]}],u={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"ecg3"},"ECG3"),(0,o.kt)("h2",{id:"import-ecg3-module"},"import ECG3 module"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  ECGModule,\n  ECGProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,o.kt)("h2",{id:"apis"},"APIs"),(0,o.kt)("h3",{id:"add-and-remove-listener"},"add and remove listener"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(ECGModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,o.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.getAllConnectedDevices();\n")),(0,o.kt)("h3",{id:"start-a-measurement"},"start a measurement"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.startMeasure(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(ECGModule.Event_Notify,  (event) => {\n    if (event.action === ECGModule.ACTION_ELECTRODE_STATUS) {\n        console.log(event[ECGProfileModule.ELECTRODE_STATUS]);\n        console.log(event[ECGProfileModule.ERROR_DESCRIPTION_ECG]);\n    }\n});\n")),(0,o.kt)("h3",{id:"cancel-a-measurement"},"cancel a measurement"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.stopMeasure(mac);\n")),(0,o.kt)("h3",{id:"get-battery"},"get battery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.getBattery(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(ECGModule.Event_Notify,  (event) => {\n    if (event.action === ECGModule.ACTION_BATTERY_ECG) {\n        console.log(event[ECGProfileModule.BATTERY_ECG])\n    }\n});\n")),(0,o.kt)("h3",{id:"set-current-time-to-device"},"set current time to device"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.sysTime(mac);\n")))}m.isMDXComponent=!0}}]);