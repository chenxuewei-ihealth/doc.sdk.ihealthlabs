"use strict";(self.webpackChunksdk_docs=self.webpackChunksdk_docs||[]).push([[8547],{3905:function(e,t,r){r.d(t,{Zo:function(){return d},kt:function(){return m}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},d=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=s(r),m=o,v=p["".concat(l,".").concat(m)]||p[m]||u[m]||a;return r?n.createElement(v,i(i({ref:t},d),{},{components:r})):n.createElement(v,i({ref:t},d))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var s=2;s<a;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},8011:function(e,t,r){r.r(t),r.d(t,{contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var n=r(7462),o=r(3366),a=(r(7294),r(3905)),i=["components"],c={title:"KN926",sidebar_position:8},l=void 0,s={unversionedId:"blood_pressure/kd926",id:"version-2.7.7/blood_pressure/kd926",isDocsHomePage:!1,title:"KN926",description:"WorkFlow",source:"@site/ios_versioned_docs/version-2.7.7/blood_pressure/kd926.md",sourceDirName:"blood_pressure",slug:"/blood_pressure/kd926",permalink:"/ihealthlabs-sdk-docs/ios/blood_pressure/kd926",editUrl:"https://github.com/chenxuewei-ihealth/ihealthlabs-sdk-docs/tree/main/ios_versioned_docs/version-2.7.7/blood_pressure/kd926.md",tags:[],version:"2.7.7",sidebarPosition:8,frontMatter:{title:"KN926",sidebar_position:8},sidebar:"version-1.33.x/mainSidebar",previous:{title:"KD723",permalink:"/ihealthlabs-sdk-docs/ios/blood_pressure/kd723"},next:{title:"HS2",permalink:"/ihealthlabs-sdk-docs/ios/scale/hs2"}},d=[{value:"WorkFlow",id:"workflow",children:[]},{value:"Connection to device",id:"connection-to-device",children:[{value:"1.Listen to device notify",id:"1listen-to-device-notify",children:[]},{value:"2.Scan for KD926 devices",id:"2scan-for-kd926-devices",children:[]},{value:"3.Connect to KD926 devices",id:"3connect-to-kd926-devices",children:[]}]},{value:"API reference",id:"api-reference",children:[{value:"Get the device battery",id:"get-the-device-battery",children:[]},{value:"Set local time to KD926",id:"set-local-time-to-kd926",children:[]},{value:"Set Current user",id:"set-current-user",children:[]},{value:"Get history data",id:"get-history-data",children:[]},{value:"Disconnect KD926 device",id:"disconnect-kd926-device",children:[]}]}],u={toc:d};function p(e){var t=e.components,r=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"workflow"},"WorkFlow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Scan and connect KD926 blood pressure monitor.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"KD926 only support offline measurement."))),(0,a.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,a.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(deviceDiscovered:) name:ContinuaBPDiscover object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(deviceConnectFailed:) name:ContinuaBPConnectFailed object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnected:) name:ContinuaBPConnectNoti object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDisconnected:) name:ContinuaBPDisConnectNoti object:nil];\n\n[BPContinuaController sharedController];\n")),(0,a.kt)("h3",{id:"2scan-for-kd926-devices"},"2.Scan for KD926 devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"[[ScanDeviceController commandGetInstance] commandScanDeviceType:HealthDeviceType_KD926];\n")),(0,a.kt)("h3",{id:"3connect-to-kd926-devices"},"3.Connect to KD926 devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"[[ConnectDeviceController commandGetInstance] commandContectDeviceWithDeviceType:HealthDeviceType_KD926 andSerialNub:deviceMac];\n")),(0,a.kt)("h2",{id:"api-reference"},"API reference"),(0,a.kt)("h3",{id:"get-the-device-battery"},"Get the device battery"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n *  Get  Battery\n * @param energyValue  0-100\n * @param error   Error codes.\n */\n-(void)commandGetBattery:(BlockEnergyValue)energyValue errorBlock:(BlockError)error;\n")),(0,a.kt)("h3",{id:"set-local-time-to-kd926"},"Set local time to KD926"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Synchronize time\n */\n-(void)commandSynchronizeTime;\n")),(0,a.kt)("h3",{id:"set-current-user"},"Set Current user"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Set the userID of memery data that need to upload\n * @param userID  The userID of memery data that want to upload.The userID is @1 or @2.\n * @param setResult  The result of setting userID,'YES'means success.\n * @param error   Error codes.\n */\n-(void)commandSetUploadUserID:(NSNumber *)userID setUserIDBlock:(BlockSetUserID)setResult errorBlock:(BlockError)error;\n")),(0,a.kt)("h3",{id:"get-history-data"},"Get history data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Upload offline data.\n * @param  uploadDataArray    offline data set, including MAP, dataID, dia, heartRate, irregular, measureState, sys, time, unit, userId.\n * @param completeBlock transfer memory complete\n * @param error   error codes.\n * Specification:\n */\n-(void)commandTransferMemoryDataWithDataArray:(BlockBachArray)uploadDataArray complete:(BlockSuccess)completeBlock errorBlock:(BlockError)error;\n")),(0,a.kt)("h3",{id:"disconnect-kd926-device"},"Disconnect KD926 device"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Disconnect current device\n */\n-(void)commandDisconnectDevice;\n")))}p.isMDXComponent=!0}}]);