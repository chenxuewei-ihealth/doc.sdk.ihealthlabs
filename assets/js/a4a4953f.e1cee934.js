"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7547],{3905:(e,n,t)=>{t.d(n,{Zo:()=>g,kt:()=>m});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,c=e.parentName,g=l(e,["components","mdxType","originalType","parentName"]),u=s(t),m=i,v=u["".concat(c,".").concat(m)]||u[m]||d[m]||r;return t?a.createElement(v,o(o({ref:n},g),{},{components:t})):a.createElement(v,o({ref:n},g))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=u;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},2530:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=t(7462),i=(t(7294),t(3905));const r={title:"BG1A",sidebar_position:5},o=void 0,l={unversionedId:"android/blood_glucose/bg1a",id:"android/blood_glucose/bg1a",title:"BG1A",description:"1. BG1A is a low-power Bluetooth glucose meter with indicator lights, but without a screen or buttons.",source:"@site/docs/android/blood_glucose/bg1a.mdx",sourceDirName:"android/blood_glucose",slug:"/android/blood_glucose/bg1a",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg1a",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_glucose/bg1a.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"BG1A",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"BG5S",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg5s"},next:{title:"PO1",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_oxygen/po1"}},c={},s=[{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for BG1A devices",id:"2scan-for-bg1a-devices",level:3},{value:"3.Connect to BG1A devices",id:"3connect-to-bg1a-devices",level:3},{value:"Connection to device",id:"connection-to-device-1",level:2},{value:"API reference",id:"api-reference",level:2},{value:"Get BG1A information.",id:"get-bg1a-information",level:3},{value:"Set BG1A timestamp.",id:"set-bg1a-timestamp",level:3},{value:"Set BG1A measurement mode.",id:"set-bg1a-measurement-mode",level:3},{value:"Get BG1A history data.",id:"get-bg1a-history-data",level:3},{value:"Delete BG1A history data.",id:"delete-bg1a-history-data",level:3},{value:"Notify the measurement workflow.",id:"notify-the-measurement-workflow",level:3},{value:"Notify measurement result.",id:"notify-measurement-result",level:3},{value:"Error message",id:"error-message",level:3}],g={toc:s};function d(e){let{components:n,...t}=e;return(0,i.kt)("wrapper",(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("ol",{parentName:"div"},(0,i.kt)("li",{parentName:"ol"},"BG1A is a low-power Bluetooth glucose meter with indicator lights, but without a screen or buttons."),(0,i.kt)("li",{parentName:"ol"},"The BG1A is only turned on by inserting test strip."),(0,i.kt)("li",{parentName:"ol"},"Although BG1A can store 2 pieces of data, we do not recommend it for offline measurement."),(0,i.kt)("li",{parentName:"ol"},"Once the device is turned on, it begins Bluetooth broadcasting and can be scanned and connected to by the app."),(0,i.kt)("li",{parentName:"ol"},"After blood glucose measurement is completed, or the test strip is removed, the device will shut down and bluetooth connection will disconnect.")))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_BG1A);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-bg1a-devices"},"2.Scan for BG1A devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.BG1A);\n")),(0,i.kt)("h3",{id:"3connect-to-bg1a-devices"},"3.Connect to BG1A devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_BG1A)\n\nBg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\n')),(0,i.kt)("h2",{id:"connection-to-device-1"},"Connection to device"),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-bg1a-information"},"Get BG1A information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1sControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\ncontrol.getDeviceInfo();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_GET_DEVICE_INFO.equals(action)) {\n            try {\n                JSONObject obj       = new JSONObject(message);\n                String protocol      = obj.getString(iHealthDevicesIDPS.PROTOCOL);\n                String accessory     = obj.getString(iHealthDevicesIDPS.ACCESSORYNAME);\n                String firmware      = obj.getString(iHealthDevicesIDPS.FIRMWAREVERSION);\n                String hardware      = obj.getString(iHealthDevicesIDPS.HARDWAREVERSION);\n                String manufacturer  = obj.getString(iHealthDevicesIDPS.MANUFACTURER);\n                String mode_number   = obj.getString(iHealthDevicesIDPS.MODENUMBER);\n                \n                // The battery level of BG1A\n                int battery_level = obj.getInt(Bg1aProfile.INFO_BATTERY_BG1A);\n                \n                /**\n                 * BG1A still has no upload results\n                 * 0: don't has results. \n                 * 1: has results.\n                 */\n                int historyDataStatus = obj.getInt(Bg1aProfile.INFO_HISTORY_STATUS_BG1A);\n                \n                // The current time of BG1A\n                String time = obj.getLong(Bg1aProfile.INFO_LOCAL_TIME);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-bg1a-timestamp"},"Set BG1A timestamp."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\n/**\n * currentTime: The current timestamp of phone.\n */\ncontrol.setDeviceTime(long currentTime);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_SET_DEVICE_TIME.equals(action)) {\n            Log.i("", "Set time success");\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"set-bg1a-measurement-mode"},"Set BG1A measurement mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\n/**\n * mode: measurement mode.\n * 0: Blood mode.\n * 1: control solution mode.\n **/\ncontrol.setMeasureMode(int mode);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_SET_MEASURE_MODE.equals(action)) {\n           Log.i("", "Set measure mode success");\n\n        } else if (Bg1aProfile.ACTION_ERROR_BG1A.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int error_id = obj.getInt(Bg1aProfile.ERROR_NUM_BG1A);\n                if (error_id == 0xf0) {\n                    Log.e("", "Set measure mode failed");\n                }\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"get-bg1a-history-data"},"Get BG1A history data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\ncontrol.getHistoryData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_MEASURE_RESULT_HISTORY.equals(action)) {\n           try {\n                JSONArray historyArr = new JSONArray(message);\n                for (int i = 0; i < historyArr.length(); i++) {\n                    JSONObject obj = historyArr.getJSONObject(i);\n                    \n                    /**\n                     * Wrong measurement time. If you use BG1A first time or no used for a long time, the time of BG1A is wrong.\n                     * 0: time is correct, don't need calibration.\n                     * 1: time is wrong, need calibration.\n                     */\n                    int wrongTime = obj.getInt(Bg1aProfile.MEASURE_TIME_IS_ERROR);\n                    \n                    // Measurement time\n                    String time = obj.getString(Bg1aProfile.MEASURE_TIME_DEVICE);\n                    \n                    // Please refer to the error message\n                    int errorId = obj.getInt(Bg1aProfile.ERROR_NUM_BG1A);\n                    \n                    /**\n                     * Measurement mode\n                     * 0: Blood measurement mode\n                     * 1: Control solution mode\n                     * 2: Uric Acid measurement mode\n                     * 3: Uric Acid control solution mode\n                     */\n                    int mode = obj.getInt(Bg1aProfile.MEASURE_MODE);\n                    \n                    // Measurement result\n                    int result = obj.getInt(Bg1aProfile.MEASURE_RESULT);\n                }\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"delete-bg1a-history-data"},"Delete BG1A history data."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\ncontrol.deleteHistoryData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_DELETE_HISTORY_RESULT.equals(action)) {\n           Log.i("", "Delete history data");\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"notify-the-measurement-workflow"},"Notify the measurement workflow."),(0,i.kt)("p",null,"No need to call any API, just listen to this event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_STRIP_INSERTION_STATUS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Bg1aProfile.STRIP_INSERTION_STATUS);\n                \n                if (0 == status) {\n                    /**\n                     * Strip Type\n                     * 1: Blood glucose\n                     * 2: Uric Acid\n                     * 3: Control solution\n                     */\n                    int stripType = obj.getInt(Bg1aProfile.STRIP_TYPE);\n                    Log.i("The test strip is inserted, and blood can be dripped.");\n\n                } else if (1 == status) {\n                    /**\n                     * Strip Type\n                     * 1: Blood glucose\n                     * 2: Uric Acid\n                     * 3: Control solution\n                     */\n                    int stripType = obj.getInt(Bg1aProfile.STRIP_TYPE);\n                    Log.i("The test strip is removed.");\n                \n                } else if (2 == status) {\n                    Log.i("Blood sucking starts.");        \n\n                } else if (3 == status) {\n                    Log.i("The blood sucking volume is insufficient for 1.");   \n                \n                } else if (4 == status) {\n                    Log.i("The blood sucking volume is insufficient for 1 state for more than 5 seconds.");   \n\n                } else if (5 == status) {\n                    Log.i("The blood sucking volume is insufficient for 2.");   \n\n                } else if (6 == status) {\n                    Log.i("The blood sucking is completed.");\n                \n                }\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"notify-measurement-result"},"Notify measurement result."),(0,i.kt)("p",null,"No need to call any API, just listen to this event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_MEASURE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                /**\n                 * Strip Type\n                 * 1: Blood glucose\n                 * 2: Uric Acid\n                 * 3: Control solution\n                 */\n                int stripType = obj.getInt(Bg1aProfile.STRIP_TYPE);\n                int value = obj.getInt(Bg1aProfile.MEASURE_RESULT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } \n    } \n}\n")),(0,i.kt)("h3",{id:"error-message"},"Error message"),(0,i.kt)("p",null,"No need to call any API, just listen to the error event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n  * Error id and error description\n  * 0: Measurement timeout, no test strip. \n  * 1: The caculation result is zero\n  * 2: Abnormal low current\n  * 3: Algorithm connection error\n  * 4: Blood-sucking timeout\n  * 5: Missing XM1 error\n  * 10: Self-inspection error\n  * 11: Unrecognized test paper type error\n  * 12: Waste test strip\n  * 14: Low power alarm (<2.6V)\n  * 15: High voltage alarm (>4V)\n  * 16: Temperature low out of range\n  * 17: Temperature high out of range\n  * 18: Flash write failed\n  * 20: No calibration inspection mark\n  * 21: No calibration recheck inspection mark\n  * 22: No test paper socket inspection mark\n  **/\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_ERROR_BG1A.equals(action)) {\n           try {\n                JSONObject obj = new JSONObject(message);\n                int error_id          = obj.getInt(Bg1aProfile.ERROR_NUM_BG1A);\n                int error_description = obj.getInt(Bg1aProfile.ERROR_DESCRIPTION_BG1A);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (iHealthDevicesManager.IHEALTH_COMM_TIMEOUT.equasls(action)) {\n            // Ble connection timeout, Please send the current command again.\n        }\n    } \n}\n")))}d.isMDXComponent=!0}}]);