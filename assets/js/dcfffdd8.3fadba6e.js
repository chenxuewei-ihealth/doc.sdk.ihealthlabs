"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2914],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=o.createContext({}),u=function(e){var t=o.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return o.createElement(i.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=u(n),g=r,f=m["".concat(i,".").concat(g)]||m[g]||d[g]||a;return n?o.createElement(f,l(l({ref:t},c),{},{components:n})):o.createElement(f,l({ref:t},c))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var u=2;u<a;u++)l[u]=n[u];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9499:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var o=n(7462),r=(n(7294),n(3905));const a={title:"HS2S Pro",sidebar_position:5},l=void 0,s={unversionedId:"react-native/scale/hs2spro",id:"react-native/scale/hs2spro",title:"HS2S Pro",description:"API Reference",source:"@site/docs/react-native/scale/hs2spro.md",sourceDirName:"react-native/scale",slug:"/react-native/scale/hs2spro",permalink:"/ihealthlabs-sdk-docs/docs/react-native/scale/hs2spro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/react-native/scale/hs2spro.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"HS2S Pro",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"HS4S",permalink:"/ihealthlabs-sdk-docs/docs/react-native/scale/hs4s"},next:{title:"HS6",permalink:"/ihealthlabs-sdk-docs/docs/react-native/scale/hs6"}},i={},u=[{value:"API Reference",id:"api-reference",level:2},{value:"Import HS2S Pro module",id:"import-hs2s-pro-module",level:3},{value:"Add and remove listener",id:"add-and-remove-listener",level:3},{value:"Get HS2S Pro information",id:"get-hs2s-pro-information",level:3},{value:"Get HS2S Pro battery level",id:"get-hs2s-pro-battery-level",level:3},{value:"Set HS2S Pro unit type",id:"set-hs2s-pro-unit-type",level:3},{value:"Get user profile in HS2S Pro",id:"get-user-profile-in-hs2s-pro",level:3},{value:"Create or update user profile in HS2S Pro",id:"create-or-update-user-profile-in-hs2s-pro",level:3},{value:"Delete user profile in HS2S Pro",id:"delete-user-profile-in-hs2s-pro",level:3},{value:"Get the number of offline measurement result in HS2S Pro",id:"get-the-number-of-offline-measurement-result-in-hs2s-pro",level:3},{value:"Get offline data in HS2S Pro",id:"get-offline-data-in-hs2s-pro",level:3},{value:"Delete offline data in HS2S Pro by user id",id:"delete-offline-data-in-hs2s-pro-by-user-id",level:3},{value:"Get the number of guest offline data in HS2S Pro",id:"get-the-number-of-guest-offline-data-in-hs2s-pro",level:3},{value:"Get guest offline data in HS2S Pro",id:"get-guest-offline-data-in-hs2s-pro",level:3},{value:"Delete guest offline data",id:"delete-guest-offline-data",level:3},{value:"Start a online measurement",id:"start-a-online-measurement",level:3},{value:"Start heart rate measurement mode",id:"start-heart-rate-measurement-mode",level:3},{value:"Stop heart rate measurement mode",id:"stop-heart-rate-measurement-mode",level:3},{value:"reset device",id:"reset-device",level:3},{value:"disconnect device",id:"disconnect-device",level:3},{value:"get all connected devices",id:"get-all-connected-devices",level:3}],c={toc:u};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"api-reference"},"API Reference"),(0,r.kt)("h3",{id:"import-hs2s-pro-module"},"Import HS2S Pro module"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  HS2SProModule,\n  HS2SProProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,r.kt)("h3",{id:"add-and-remove-listener"},"Add and remove listener"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,r.kt)("h3",{id:"get-hs2s-pro-information"},"Get HS2S Pro information"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.getDeviceInfo(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_get_device_info") {\n       console.log(event["battery"]);\n       console.log(event["unit_current"]);\n       console.log(event["user_count"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"get-hs2s-pro-battery-level"},"Get HS2S Pro battery level"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.getBattery(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "battery_hs") {\n       console.log(event["battery"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"set-hs2s-pro-unit-type"},"Set HS2S Pro unit type"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * Unit type:\n * 1: kg\n * 2: lbs\n * 3: st\n **/\nHS2SProModule.setUnit(mac, unit);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_set_unit") {\n       console.log(event["status"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"get-user-profile-in-hs2s-pro"},"Get user profile in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.getUserInfo(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_get_user_info") {\n       console.log(event["user_info_count"]);\n       let array = event["user_info_array"];\n       console.log(array["body_building"]);\n       console.log(array["impedance"]);\n       console.log(array["height"]);\n       console.log(array["age"]);\n       console.log(array["gender"]);\n       console.log(array["weight"]);\n       console.log(array["create_time"]);\n       console.log(array["user_id"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"create-or-update-user-profile-in-hs2s-pro"},"Create or update user profile in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * userID: User id, the id must be 16 digits.\n * createTS: Create user or modify timestamp.\n * weight: user current weight, the unit is kg, range is 20kg~180kg.\n * age: user age, range is 18-99, if you are not in this range, you may not get the correect body fat result\n * height: user height, range is 90cm~220cm\n * gender: 0: female, 1: male\n * impedanceMark: 0: no need body fat measurement, 1: need fat measurement\n * fitnessMark: 0: no body building, 1: body building\n **/\nHS2SProModule.updateUserInfo(mac, userID, createTS, weight, age, height, gender, impedanceMark, fitnessMark);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_create_or_update_user_info") {\n       console.log(event["status"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"delete-user-profile-in-hs2s-pro"},"Delete user profile in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * userID: User id.\n **/\nHS2SProModule.deleteUser(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_delete_user_info") {\n       console.log(event["status"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"get-the-number-of-offline-measurement-result-in-hs2s-pro"},"Get the number of offline measurement result in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * userID: User id.\n **/\nHS2SProModule.getMemoryDataCount(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_history_data_num") {\n       console.log(event["history_data_count"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"get-offline-data-in-hs2s-pro"},"Get offline data in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * userID: User id.\n **/\nHS2SProModule.getMemoryData(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_history_data") {\n        let arr = event["history_data"];\n        arr.forEach(function(result) {\n            console.log(result["right_time"]);\n            console.log(result["body_building"]);           \n            console.log(result["gender"]);\n            console.log(result["height"]);\n            console.log(result["weight"]);\n            console.log(result["instruction_type"]);\n            console.log(result["impedanceEncrypt"]);\n            console.log(result["age"]);\n            console.log(result["impedance"]);\n            console.log(result["dataID"]);\n            console.log(result["measure_time"]);\n            console.log(result["user_num"]);\n            console.log(result["data_impedance_errors"]);\n       })\n    }\n//If body fat is measured, this information will be returned :\n\nif (event.action === "action_history_data") {\n        let arr = event["history_data"];\n        arr.forEach(function(result) {\n            console.log(result["right_time"]);\n            console.log(result["body_building"]);           \n            console.log(result["gender"]);\n            console.log(result["height"]);\n            console.log(result["weight"]);\n            console.log(result["instruction_type"]);\n            console.log(result["impedanceEncrypt"]);\n            console.log(result["age"]);\n            console.log(result["impedance"]);\n            console.log(result["dataID"]);\n            console.log(result["measure_time"]);\n            console.log(result["user_num"]);\n            console.log(result["data_impedance_errors"]);\n            console.log(result["body_fit_percentage"]);\n            console.log(result["protein_rate"]);\n            console.log(result["muscle_mass"]);\n            console.log(result["body_water_rate"]);\n            console.log(result["bone_salt_content"]);\n       })\n    }\n\n       \n\n});\n')),(0,r.kt)("h3",{id:"delete-offline-data-in-hs2s-pro-by-user-id"},"Delete offline data in HS2S Pro by user id"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * userID: User id.\n **/\nHS2SProModule.deleteMemoryData(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_delete_history_data") {\n       console.log(event["status"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"get-the-number-of-guest-offline-data-in-hs2s-pro"},"Get the number of guest offline data in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.getAnonymousMemoryDataCount(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_anonymous_data_num") {\n       console.log(event["anonymous_data_count"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"get-guest-offline-data-in-hs2s-pro"},"Get guest offline data in HS2S Pro"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.getAnonymousMemoryData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_anonymous_data") {\n        let arr = event["history_data"];\n        arr.forEach(function(result) {\n            console.log(result["right_time"]);\n            console.log(result["dataID"]);\n            console.log(result["measure_time"]);\n            console.log(result["weight"]);\n       })\n    }\n});\n')),(0,r.kt)("h3",{id:"delete-guest-offline-data"},"Delete guest offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.deleteAnonymousMemoryData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_delete_anonymous_data") {\n       console.log(event["status"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"start-a-online-measurement"},"Start a online measurement"),(0,r.kt)("p",null,"The API is async function. It will return message until finish measurement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'/**\n * userType:0 guest,1 normal user\n * userID: User id, the id must be 16 digits.\n * createTS: Create user or modify Timestamp.\n * weight: user current weight, the unit is kg, range is 20kg~180kg.\n * age: user age, range is 18-99, if you are not in this range, you may not get the correect body fat result\n * height: user height, range is 90cm~220cm\n * gender: 0: female, 1: male\n * impedanceMark: 0: no need body fat measurement, 1: need fat measurement\n * fitnessMark: 0: no body building, 1: body building\n **/\nHS2SProModule.measure(mac,userType,userID,createTS,weight,age,height,sex,impedanceMark,fitnessMark);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n   \n   if (event.action === "action_online_real_time_weight") {\n        console.log(event["weight"]);\n\n    } else if (event.action === "action_online_result") {\n        console.log(event["weight"]);\n\n    } else if (event.action === "action_body_fat_result") {\n        let dic = event["data_body_fat_result"];\n        dic.forEach(function(result) {\n            console.log(result["right_time"]);\n            console.log(result["body_building"]);           \n            console.log(result["gender"]);\n            console.log(result["height"]);\n            console.log(result["weight"]);\n            console.log(result["instruction_type"]);\n            console.log(result["impedanceEncrypt"]);\n            console.log(result["age"]);\n            console.log(result["impedance"]);\n            console.log(result["dataID"]);\n            console.log(result["measure_time"]);\n            console.log(result["user_num"]);\n            console.log(result["data_impedance_errors"]);\n       })\n       //If body fat is measured, this information will be returned :\n        let dic = event["data_body_fat_result"];\n        dic.forEach(function(result) {\n            console.log(result["right_time"]);\n            console.log(result["body_building"]);           \n            console.log(result["gender"]);\n            console.log(result["height"]);\n            console.log(result["weight"]);\n            console.log(result["instruction_type"]);\n            console.log(result["impedanceEncrypt"]);\n            console.log(result["age"]);\n            console.log(result["impedance"]);\n            console.log(result["dataID"]);\n            console.log(result["measure_time"]);\n            console.log(result["user_num"]);\n            console.log(result["data_impedance_errors"]);\n            console.log(result["body_fit_percentage"]);\n            console.log(result["protein_rate"]);\n            console.log(result["muscle_mass"]);\n            console.log(result["body_water_rate"]);\n            console.log(result["bone_salt_content"]);\n       })\n    } \n});\n')),(0,r.kt)("h3",{id:"start-heart-rate-measurement-mode"},"Start heart rate measurement mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.enterHS2SProHeartRateMeasurementMode(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_start_heartrate_measure") {\n       \n    }\n    if (event.action === "action_heartrate_measure_status") {\n       console.log(event["status"]);\n    }\n    if (event.action === "action_stop_heartrate_result") {\n       console.log(event["heartrate"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"stop-heart-rate-measurement-mode"},"Stop heart rate measurement mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.exitHS2SProHeartRateMeasurementMode(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_stop_heartrate_measure") {\n       \n    }\n});\n')),(0,r.kt)("h3",{id:"reset-device"},"reset device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SProModule.resetDevice(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SProModule.Event_Notify,  (event) => {\n    if (event.action === "action_restore_fatory_settings") {\n       console.log(event["status"]);\n    }\n});\n')),(0,r.kt)("h3",{id:"disconnect-device"},"disconnect device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"HS2SProModule.disconnect(mac);\n")),(0,r.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"HS2SProModule.getAllConnectedDevices();\n")))}d.isMDXComponent=!0}}]);