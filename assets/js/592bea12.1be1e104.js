"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[4287],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return A}});var o=n(7294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,l=function(e,t){if(null==e)return{};var n,o,l={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},M=o.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,s=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),M=d(n),A=l,v=M["".concat(s,".").concat(A)]||M[A]||u[A]||i;return n?o.createElement(v,r(r({ref:t},c),{},{components:n})):o.createElement(v,r({ref:t},c))}));function A(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=M;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:l,r[1]=a;for(var d=2;d<i;d++)r[d]=n[d];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}M.displayName="MDXCreateElement"},8833:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return A},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return u}});var o=n(7462),l=n(3366),i=(n(7294),n(3905)),r=["components"],a={title:"AM3S",sidebar_position:2},s=void 0,d={unversionedId:"react-native/tracker/am3s",id:"react-native/tracker/am3s",title:"AM3S",description:"API Reference",source:"@site/docs/react-native/tracker/am3s.md",sourceDirName:"react-native/tracker",slug:"/react-native/tracker/am3s",permalink:"/ihealthlabs-sdk-docs/docs/react-native/tracker/am3s",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/react-native/tracker/am3s.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"AM3S",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"AM3",permalink:"/ihealthlabs-sdk-docs/docs/react-native/tracker/am3"},next:{title:"AM4",permalink:"/ihealthlabs-sdk-docs/docs/react-native/tracker/am4"}},c={},u=[{value:"API Reference",id:"api-reference",level:2},{value:"Import AM3S Module",id:"import-am3s-module",level:3},{value:"Add and remove listener",id:"add-and-remove-listener",level:3},{value:"get all connected am3s devices",id:"get-all-connected-am3s-devices",level:3},{value:"disconnect a am3s devices",id:"disconnect-a-am3s-devices",level:3},{value:"erase am3s memory",id:"erase-am3s-memory",level:3},{value:"get the user id bound to the device",id:"get-the-user-id-bound-to-the-device",level:3},{value:"set the user id to the device",id:"set-the-user-id-to-the-device",level:3},{value:"setAlarmClock",id:"setalarmclock",level:3},{value:"get alarm clock ids",id:"get-alarm-clock-ids",level:3},{value:"get alarm clock detail",id:"get-alarm-clock-detail",level:3},{value:"delete alarm clock by id",id:"delete-alarm-clock-by-id",level:3},{value:"set activity reminder interval",id:"set-activity-reminder-interval",level:3},{value:"get activity reminder interval",id:"get-activity-reminder-interval",level:3},{value:"get am3s information",id:"get-am3s-information",level:3},{value:"set user id to the am3s device",id:"set-user-id-to-the-am3s-device",level:3},{value:"set user information to the am3s device",id:"set-user-information-to-the-am3s-device",level:3},{value:"get user information stored in the am3s device",id:"get-user-information-stored-in-the-am3s-device",level:3},{value:"set bmr to the am3s device",id:"set-bmr-to-the-am3s-device",level:3},{value:"get activity steps",id:"get-activity-steps",level:3},{value:"get current activity steps",id:"get-current-activity-steps",level:3},{value:"set current time to am3s device",id:"set-current-time-to-am3s-device",level:3},{value:"set hour mode (12 or 24) to am3s device",id:"set-hour-mode-12-or-24-to-am3s-device",level:3},{value:"get hour mode (12 or 24) from am3s device",id:"get-hour-mode-12-or-24-from-am3s-device",level:3},{value:"get sleep data stored in the am3s",id:"get-sleep-data-stored-in-the-am3s",level:3}],M={toc:u};function A(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},M,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"import-am3s-module"},"Import AM3S Module"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  AM3SModule,\n  AMProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,i.kt)("h3",{id:"add-and-remove-listener"},"Add and remove listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,i.kt)("h3",{id:"get-all-connected-am3s-devices"},"get all connected am3s devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.getAllConnectedDevices();\n")),(0,i.kt)("h3",{id:"disconnect-a-am3s-devices"},"disconnect a am3s devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.disconnect(mac);\n")),(0,i.kt)("h3",{id:"erase-am3s-memory"},"erase am3s memory"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.reset(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_RESET_AM) {\n        if (0 === event[AMProfileModule.RESET_AM]) {\n            console.log('reset fail');\n        } else if (1 === event[AMProfileModule.RESET_AM]) {\n            console.log('reset success');\n        }\n    }\n});\n")),(0,i.kt)("h3",{id:"get-the-user-id-bound-to-the-device"},"get the user id bound to the device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.getUserId(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_USERID_AM) {\n        console.log(event[AMProfileModule.USERID_AM]);\n    }\n});\n")),(0,i.kt)("h3",{id:"set-the-user-id-to-the-device"},"set the user id to the device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// id: user id, the range is 0~0x7fffffff\nAM3SModule.setUserId(mac, id);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_USERID_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"setalarmclock"},"setAlarmClock"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"\n/**\n * id: alarm clock id, you can set up to 3 alarm clocks\n * hour: clock hour\n * min:  clock minates\n * isRepeat: one time or repeat\n * weeks: available on the day of the week\n * isOn: open or close\n */\n\nAM3SModule.setAlarmClock(mac, 1, 12, 0, true, [1, 1, 1, 1, 1, 0, 0], false);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_ALARMINFO_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"get-alarm-clock-ids"},"get alarm clock ids"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.getAlarmClockNum(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_ALARMINFO_SUCCESS_AM) {\n        console.log(event[AMProfileModule.GET_ALARMNUM_AM]);    // e.g. 3\n        console.log(event[AMProfileModule.GET_ALARMNUM_ID_AM]); // e.g. [1, 2, 3]\n    }\n});\n")),(0,i.kt)("h3",{id:"get-alarm-clock-detail"},"get alarm clock detail"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'AM3SModule.getAlarmClockDetail(mac, [1, 3, 2]);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_GET_ALARMINFO_AM) {\n        let dataArray = event[BPProfileModule.GET_ALARM_CLOCK_DETAIL];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n                console.log(offlineData[AMProfileModule.GET_ALARM_ID_AM]);\n                console.log(offlineData[AMProfileModule.GET_ALARM_TIME_AM]);\n                console.log(offlineData[AMProfileModule.GET_ALARM_ISREPEAT_AM]);\n                console.log(offlineData[AMProfileModule.GET_ALARM_WEEK_AM]);\n                console.log(offlineData[AMProfileModule.GET_ALARM_ISON_AM]);\n            }\n        } \n    }\n});\n')),(0,i.kt)("h3",{id:"delete-alarm-clock-by-id"},"delete alarm clock by id"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.deleteAlarmClock(mac, 1);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_DELETE_ALARM_SUCCESS_AM) {\n        console.log('delete success');\n    }\n});\n")),(0,i.kt)("h3",{id:"set-activity-reminder-interval"},"set activity reminder interval"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * hour\n * min\n * isOn: open or close\n */\nAM3SModule.setActivityRemind(mac, 0, 30, false);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_ACTIVITYREMIND_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"get-activity-reminder-interval"},"get activity reminder interval"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.getActivityRemind(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_GET_ACTIVITY_REMIND_AM) {\n        console.log('get success');\n    }\n});\n")),(0,i.kt)("h3",{id:"get-am3s-information"},"get am3s information"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.queryAMState(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_QUERY_STATE_AM) {\n        // 0 indicates waist\n        // 1 indicates wrist\n        // 2 indicates sleep\n        console.log(event[AMProfileModule.QUERY_STATE_AM]);\n        // battery level 0~10\n        console.log(event[AMProfileModule.QUERY_BATTERY_AM]);\n    }\n});\n")),(0,i.kt)("h3",{id:"set-user-id-to-the-am3s-device"},"set user id to the am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// The user id range is from 0 to 0x7fffffff\nAM3SModule.setUserId(mac, 8);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_USERID_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"set-user-information-to-the-am3s-device"},"set user information to the am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * age\n * height(cm)\n * weight(lbs)\n * gender 0: female, 1: male\n * unit 0: miles, 1: kilometre\n * target the goal of steps, the range is from 4 ~ 65535\n * activityLevel 1: sedentary, 2: active, 3: very active\n */\nAM3SModule.setUserInfo(mac, 25, 183, 80, AMProfileModule.AM_SET_MALE, AMProfileModule.AM_SET_UNIT_METRIC, 10000, 1, 30);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_USERINFO_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"get-user-information-stored-in-the-am3s-device"},"get user information stored in the am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.getUserInfo(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_GET_USERINFO_AM) {\n        console.log(event[AMProfileModule.GET_USER_AGE_AM]);\n        console.log(event[AMProfileModule.GET_USER_STEP_AM]);\n        console.log(event[AMProfileModule.GET_USER_HEIGHT_AM]);\n        console.log(event[AMProfileModule.GET_USER_SEX_AM]);\n        console.log(event[AMProfileModule.GET_USER_WEIGHT_AM]);\n        console.log(event[AMProfileModule.GET_USER_UNIT_AM]);\n        console.log(event[AMProfileModule.GET_USER_AGE_AM]);\n        console.log(event[AMProfileModule.GET_USER_TARGET1_AM]);\n        console.log(event[AMProfileModule.GET_USER_TARGET2_AM]);\n        console.log(event[AMProfileModule.GET_USER_TARGET3_AM]);\n    }\n});\n")),(0,i.kt)("h3",{id:"set-bmr-to-the-am3s-device"},"set bmr to the am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// bmr Basal Metabolic Rate\nAM3SModule.setUserBmr(mac, 2000);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_BMR_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"get-activity-steps"},"get activity steps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'AM3SModule.syncActivityData(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SYNC_ACTIVITY_DATA_AM) {\n        let dataArray = event[AMProfileModule.SYNC_ACTIVITY_EACH_DATA_AM];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n                console.log(offlineData[AMProfileModule.SYNC_ACTIVITY_DATA_TIME_AM]);\n                console.log(offlineData[AMProfileModule.SYNC_ACTIVITY_DATA_STEP_AM]);\n                console.log(offlineData[AMProfileModule.SYNC_ACTIVITY_DATA_CALORIE_AM]);\n                console.log(offlineData[AMProfileModule.SYNC_ACTIVITY_DATA_STEP_LENGTH_AM]);\n                console.log(offlineData[AMProfileModule.DATAID]);\n            }\n        }\n    }\n});\n')),(0,i.kt)("h3",{id:"get-current-activity-steps"},"get current activity steps"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.syncRealData(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SYNC_REAL_DATA_AM) {\n        console.log(offlineData[AMProfileModule.SYNC_REAL_STEP_AM]);\n        console.log(offlineData[AMProfileModule.SYNC_REAL_CALORIE_AM]);\n        console.log(offlineData[AMProfileModule.SYNC_REAL_TOTALCALORIE_AM]);\n    }\n});\n")),(0,i.kt)("h3",{id:"set-current-time-to-am3s-device"},"set current time to am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.syncRealData(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SYNC_TIME_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"set-hour-mode-12-or-24-to-am3s-device"},"set hour mode (12 or 24) to am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"/**\n * AMProfileModule.AM_SET_12_HOUR_MODE(0)\n * AMProfileModule.AM_SET_24_HOUR_MODE(1)\n * AMProfileModule.AM_SET_EXCEPT_EUROPE_12_HOUR_MODE(2)\n * AMProfileModule.AM_SET_EUROPE_12_HOUR_MODE(3)\n * AMProfileModule.AM_SET_EXCEPT_EUROPE_24_HOUR_MODE(4)\n * AMProfileModule.AM_SET_EUROPE_24_HOUR_MODE\n **/\nAM3SModule.setHourMode(mac, AMProfileModule.AM_SET_24_HOUR_MODE);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SET_HOUR_MODE_SUCCESS_AM) {\n        console.log('set success');\n    }\n});\n")),(0,i.kt)("h3",{id:"get-hour-mode-12-or-24-from-am3s-device"},"get hour mode (12 or 24) from am3s device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"AM3SModule.getHourMode(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_GET_HOUR_MODE_AM) {\n        console.log(event[AMProfileModule.GET_HOUR_MODE_AM]);\n    }\n});\n")),(0,i.kt)("h3",{id:"get-sleep-data-stored-in-the-am3s"},"get sleep data stored in the am3s"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'AM3SModule.syncSleepData(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(AM3SModule.Event_Notify,  (event) => {\n    if (event.action === AMProfileModule.ACTION_SYNC_SLEEP_DATA_AM) {\n        let dataArray = event[AMProfileModule.SYNC_SLEEP_DATA_AM];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n                console.log(offlineData[AMProfileModule.SYNC_SLEEP_EACH_DATA_AM]);\n                console.log(offlineData[AMProfileModule.SYNC_SLEEP_DATA_TIME_AM]);\n                console.log(offlineData[AMProfileModule.SYNC_SLEEP_DATA_LEVEL_AM]);\n                console.log(offlineData[AMProfileModule.DATAID]);\n            }\n        }\n    }\n});\n')))}A.isMDXComponent=!0}}]);