"use strict";(self.webpackChunkdoc_sdk=self.webpackChunkdoc_sdk||[]).push([[830],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return p}});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function a(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),d=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},s=function(e){var n=d(e.components);return o.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},f=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,s=a(e,["components","mdxType","originalType","parentName"]),f=d(t),p=r,m=f["".concat(c,".").concat(p)]||f[p]||u[p]||l;return t?o.createElement(m,i(i({ref:n},s),{},{components:t})):o.createElement(m,i({ref:n},s))}));function p(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,i=new Array(l);i[0]=f;var a={};for(var c in n)hasOwnProperty.call(n,c)&&(a[c]=n[c]);a.originalType=e,a.mdxType="string"==typeof e?e:r,i[1]=a;for(var d=2;d<l;d++)i[d]=t[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,t)}f.displayName="MDXCreateElement"},2514:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return c},metadata:function(){return d},toc:function(){return s},default:function(){return f}});var o=t(7462),r=t(3366),l=(t(7294),t(3905)),i=["components"],a={},c="HS2",d={unversionedId:"device/hs2",id:"device/hs2",isDocsHomePage:!1,title:"HS2",description:"import HS2 module",source:"@site/docs/device/hs2.md",sourceDirName:"device",slug:"/device/hs2",permalink:"/doc.sdk.ihealthlabs/docs/device/hs2",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/device/hs2.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ECG3",permalink:"/doc.sdk.ihealthlabs/docs/device/ecgusb"},next:{title:"HS2S",permalink:"/doc.sdk.ihealthlabs/docs/device/hs2s"}},s=[{value:"import HS2 module",id:"import-hs2-module",children:[]},{value:"APIs",id:"apis",children:[{value:"add and remove listener",id:"add-and-remove-listener",children:[]},{value:"start a measurement",id:"start-a-measurement",children:[]},{value:"get data stored in the HS2 device",id:"get-data-stored-in-the-hs2-device",children:[]},{value:"disconnect device",id:"disconnect-device",children:[]},{value:"get all connected devices",id:"get-all-connected-devices",children:[]}]}],u={toc:s};function f(e){var n=e.components,t=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"hs2"},"HS2"),(0,l.kt)("h2",{id:"import-hs2-module"},"import HS2 module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  HS2Module,\n  HSProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,l.kt)("h2",{id:"apis"},"APIs"),(0,l.kt)("h3",{id:"add-and-remove-listener"},"add and remove listener"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(HS2Module.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,l.kt)("h3",{id:"start-a-measurement"},"start a measurement"),(0,l.kt)("p",null,"The API is asyn function. It will return message until finish measurement."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"HS2Module.startMeasure(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2Module.Event_Notify,  (event) => {\n    if (event.action === HSProfileModule.ACTION_ONLINE_RESULT_HS) {\n        console.log(event[HSProfileModule.DATAID]);\n        console.log(event[HSProfileModule.WEIGHT_HS]);\n        console.log(event[HSProfileModule.FAT_HS]);\n        console.log(event[HSProfileModule.WATER_HS]);\n        console.log(event[HSProfileModule.MUSCLE_HS]);\n        console.log(event[HSProfileModule.SKELETON_HS]);\n        console.log(event[HSProfileModule.FATELEVEL_HS]);\n        console.log(event[HSProfileModule.DCI_HS]);\n    }\n});\n")),(0,l.kt)("h3",{id:"get-data-stored-in-the-hs2-device"},"get data stored in the HS2 device"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'HS2Module.getOfflineData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2Module.Event_Notify,  (event) => {\n    if (event.action === HSProfileModule.ACTION_HISTORICAL_DATA_HS) {\n        let dataArray = event[HSProfileModule.HISTORDATA_HS];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n                console.log(offlineData[HSProfileModule.MEASUREMENT_DATE_HS]);\n                console.log(offlineData[HSProfileModule.WEIGHT_HS]);\n                console.log(offlineData[HSProfileModule.FAT_HS]);\n                console.log(offlineData[HSProfileModule.WATER_HS]);\n                console.log(offlineData[HSProfileModule.MUSCLE_HS]);\n                console.log(offlineData[HSProfileModule.SKELETON_HS]);\n                console.log(offlineData[HSProfileModule.FATELEVEL_HS]);\n                console.log(offlineData[HSProfileModule.DATAID]);\n            }\n        }\n    }\n});\n')),(0,l.kt)("h3",{id:"disconnect-device"},"disconnect device"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP3LModule.disConnect(mac);\n")),(0,l.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP3LModule.getAllConnectedDevices();\n")))}f.isMDXComponent=!0}}]);