"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3929],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),p=l(r),m=o,v=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(v,c(c({ref:t},u),{},{components:r})):n.createElement(v,c({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,c=new Array(a);c[0]=p;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,c[1]=i;for(var l=2;l<a;l++)c[l]=r[l];return n.createElement.apply(null,c)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},323:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={title:"ECG3",sidebar_position:1},c=void 0,i={unversionedId:"ios/ecg/ecg",id:"ios/ecg/ecg",title:"ECG3",description:"WorkFlow",source:"@site/docs/ios/ecg/ecg.md",sourceDirName:"ios/ecg",slug:"/ios/ecg/",permalink:"/ihealthlabs-sdk-docs/docs/ios/ecg/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ios/ecg/ecg.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"ECG3",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"AM6",permalink:"/ihealthlabs-sdk-docs/docs/ios/tracker/am6"},next:{title:"ECG3USB",permalink:"/ihealthlabs-sdk-docs/docs/ios/ecg/ecgusb"}},s={},l=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for ECG3 devices",id:"2scan-for-ecg3-devices",level:3},{value:"3.Connect to ECG3 devices",id:"3connect-to-ecg3-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Sync time",id:"sync-time",level:3},{value:"Get Battery",id:"get-battery",level:3},{value:"Start Measure",id:"start-measure",level:3},{value:"Finish Measure",id:"finish-measure",level:3},{value:"Disconnect",id:"disconnect",level:3}],u={toc:l};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"workflow"},"WorkFlow"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Scan and connect ECG3.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"ECG3 support online  measurement."))),(0,o.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,o.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDiscover:) name:ECG3Discover object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnectFail:) name:ECG3ConnectFailed object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnect:) name:ECG3ConnectNoti object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDisConnect:) name:ECG3DisConnectNoti object:nil];\n            \n[ECG3Controller shareECG3Controller];\n\n")),(0,o.kt)("h3",{id:"2scan-for-ecg3-devices"},"2.Scan for ECG3 devices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"[[ScanDeviceController commandGetInstance] commandScanDeviceType:HealthDeviceType_ECG3];\n")),(0,o.kt)("h3",{id:"3connect-to-ecg3-devices"},"3.Connect to ECG3 devices"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"[[ConnectDeviceController commandGetInstance] commandContectDeviceWithDeviceType:HealthDeviceType_ECG3 andSerialNub:deviceMac];\n")),(0,o.kt)("h2",{id:"api-reference"},"API reference"),(0,o.kt)("h3",{id:"sync-time"},"Sync time"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Sync time\n * @param syncTimeBlock Sync time successfully\n * @param errorBlock Communication error codes, see ECG3 error descriptions.\n */\n-(void)commandECG3SyncTime:(DisposeECG3SyncTimeSuccessBlock)syncTimeBlock withErrorBlock:(DisposeECG3ErrorBlock)errorBlock;\n")),(0,o.kt)("h3",{id:"get-battery"},"Get Battery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Get Battery\n * @param batteryBlock from 0\uff5e100.\n * @param errorBlock Communication error codes, see ECG3 error descriptions.\n */\n-(void)commandECG3GetBatteryInfo:(DisposeECG3GetBatteryBlock)batteryBlock withErrorBlock:(DisposeECG3ErrorBlock)errorBlock;\n")),(0,o.kt)("h3",{id:"start-measure"},"Start Measure"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Start Measure\n * @param startMeasureBlock True: Success\uff0c False: Failed.\n * @param waveDataBlock waveData\uff1aECGWaveData use for draw wave\n * @param pluseResultBlock hasHR: whether have heart; HR: heart rate (unit: bpm) only valid when isHaveHeart is true\n * @param errorBlock Communication error codes, see ECG3 error descriptions.\n */\n-(void)commandECG3StartMeasure:(DisposeECG3StartMeasureBlock)startMeasureBlock withWaveData:(DisposeECG3WaveDataBlock)waveDataBlock withPulseResult:(DisposeECG3PluseResultBlock)pluseResultBlock withErrorBlock:(DisposeECG3ErrorBlock)errorBlock;\n")),(0,o.kt)("h3",{id:"finish-measure"},"Finish Measure"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * Finish Measure\n * @param finishMeasureBlock finish successfully\n * @param errorBlock Communication error codes, see ECG3 error descriptions.\n */\n-(void)commandECG3FinishMeasure:(DisposeECG3FinishMeasureSuccessBlock)finishMeasureBlock withErrorBlock:(DisposeECG3ErrorBlock)errorBlock;\n")),(0,o.kt)("h3",{id:"disconnect"},"Disconnect"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"/**\n Disconnect device\n */\n- (void)disconnectDevice;\n")))}d.isMDXComponent=!0}}]);