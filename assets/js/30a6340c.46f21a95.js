"use strict";(self.webpackChunksdk_docs=self.webpackChunksdk_docs||[]).push([[354],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return p}});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},u=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),f=s(t),p=o,m=f["".concat(c,".").concat(p)]||f[p]||d[p]||i;return t?r.createElement(m,a(a({ref:n},u),{},{components:t})):r.createElement(m,a({ref:n},u))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=f;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},76288:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),a=["components"],l={title:"BG1S",sidebar_position:2},c=void 0,s={unversionedId:"blood_glucose/bg1s",id:"version-1.4.9/blood_glucose/bg1s",isDocsHomePage:!1,title:"BG1S",description:"API Reference",source:"@site/react-native_versioned_docs/version-1.4.9/blood_glucose/bg1s.md",sourceDirName:"blood_glucose",slug:"/blood_glucose/bg1s",permalink:"/react-native/blood_glucose/bg1s",editUrl:"https://github.com/chenxuewei-ihealth/ihealthlabs-sdk-docs/tree/main/react-native_versioned_docs/version-1.4.9/blood_glucose/bg1s.md",tags:[],version:"1.4.9",sidebarPosition:2,frontMatter:{title:"BG1S",sidebar_position:2},sidebar:"version-0.23.x/mainSidebar",previous:{title:"BG1",permalink:"/react-native/blood_glucose/bg1"},next:{title:"BG5",permalink:"/react-native/blood_glucose/bg5"}},u=[{value:"API Reference",id:"api-reference",children:[{value:"Add and remove listener",id:"add-and-remove-listener",children:[]},{value:"get function",id:"get-function",children:[]},{value:"start a measurement",id:"start-a-measurement",children:[]}]}],d={toc:u};function f(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"api-reference"},"API Reference"),(0,i.kt)("h3",{id:"add-and-remove-listener"},"Add and remove listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(BG1SModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,i.kt)("h3",{id:"get-function"},"get function"),(0,i.kt)("p",null,"Set current time to BG1S and return battery level, bg1s code version."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'BG1SModule.getFunction(mac);\n\n// response\n// {"action": "action_get_device_info", "battery": 100, "info_version_code_blood_bg1s": 1, "info_version_code_ctl_bg1s": 2, "mac": "F65FF0CBA330", "type": "BG1S"}\nnotifyListener = DeviceEventEmitter.addListener(BG1SModule.Event_Notify,  (event) => {\n    if (event.action === BG1SProfileModule.ACTION_CODE_ANALYSIS) {\n        console.log(event[BG1SProfileModule.INFO_BATTERY_BG1S]);\n        console.log(event[BG1SProfileModule.INFO_VERSION_CODE_BLOOD_BG1S]);\n        console.log(event[BG1SProfileModule.INFO_VERSION_CODE_CTL_BG1S]);\n    }\n});\n')),(0,i.kt)("h3",{id:"start-a-measurement"},"start a measurement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// measureMode 0: measure with real blood, 1: measure with control solution\nBG1SModule.measure(mac, 1);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(BG1SModule.Event_Notify,  (event) => {\n    if (event.action === BG1SProfileModule.ACTION_STRIP_INSERTION_STATUS) {\n        // {"action": "action_strip_insertion_status", "describe": "strip in", "insertion_status": 1, "mac": "F65FF0CBA330", "type": "BG1S"}\n        console.log("strip in");\n\n    } else if (event.action === BG1SProfileModule.ACTION_GET_BLOOD) {\n        //  {"action": "action_get_blood", "describe": "get blood", "mac": "F65FF0CBA330", "type": "BG1S"}\n        console.log("blood");\n\n    } else if (event.action === BG1SProfileModule.ACTION_MEASURE_RESULT) {\n        // {"action": "action_measure_result", "mac": "F65FF0CBA330", "measure_mode": 0, "measure_result": 0, "type": "BG1S"}\n        console.log(event[BG1SProfileModule.MEASURE_MODE]);\n        console.log(event[BG1SProfileModule.MEASURE_RESULT]);\n    }\n});\n')))}f.isMDXComponent=!0}}]);