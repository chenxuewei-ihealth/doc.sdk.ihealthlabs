"use strict";(self.webpackChunkdoc_sdk=self.webpackChunkdoc_sdk||[]).push([[317],{9827:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return a},contentTitle:function(){return r},metadata:function(){return c},toc:function(){return s},default:function(){return f}});var o=t(7462),i=t(3366),l=(t(7294),t(3905)),d=["components"],a={},r="KN550",c={unversionedId:"device/kn550",id:"device/kn550",isDocsHomePage:!1,title:"KN550",description:"import KN550 module",source:"@site/docs/device/kn550.md",sourceDirName:"device",slug:"/device/kn550",permalink:"/doc.sdk.ihealthlabs/docs/device/kn550",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/device/kn550.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BP7S",permalink:"/doc.sdk.ihealthlabs/docs/device/bp7s"}},s=[{value:"import KN550 module",id:"import-kn550-module",children:[]},{value:"APIs",id:"apis",children:[{value:"add and remove listener",id:"add-and-remove-listener",children:[]},{value:"get battery",id:"get-battery",children:[]},{value:"get KN550 function",id:"get-kn550-function",children:[]},{value:"get quantity of data stored in the KN550 device",id:"get-quantity-of-data-stored-in-the-kn550-device",children:[]},{value:"get data stored in the KN550 device",id:"get-data-stored-in-the-kn550-device",children:[]},{value:"disconnect device",id:"disconnect-device",children:[]},{value:"get device information",id:"get-device-information",children:[]},{value:"get all connected devices",id:"get-all-connected-devices",children:[]}]}],u={toc:s};function f(e){var n=e.components,t=(0,i.Z)(e,d);return(0,l.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"kn550"},"KN550"),(0,l.kt)("h2",{id:"import-kn550-module"},"import KN550 module"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  BP550BTModule,\n  BPProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,l.kt)("h2",{id:"apis"},"APIs"),(0,l.kt)("h3",{id:"add-and-remove-listener"},"add and remove listener"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(BP550BTModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,l.kt)("h3",{id:"get-battery"},"get battery"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP550BTModule.getBattery(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(BP550BTModule.Event_Notify,  (event) => {\n    if (event.action === BPProfileModule.ACTION_BATTERY_BP) {\n        console.log(event[BPProfileModule.BATTERY_BP]);\n    }\n});\n")),(0,l.kt)("h3",{id:"get-kn550-function"},"get KN550 function"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP550BTModule.getFunctionInfo(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(BP550BTModule.Event_Notify,  (event) => {\n    if (event.action === BPProfileModule.ACTION_FUNCTION_INFORMATION_BP) {\n        console.log(event[BPProfileModule.FUNCTION_IS_UPAIR_MEASURE]);\n        console.log(event[BPProfileModule.FUNCTION_IS_ARM_MEASURE]);\n        console.log(event[BPProfileModule.FUNCTION_HAVE_ANGLE_SENSOR]);\n        console.log(event[BPProfileModule.FUNCTION_HAVE_OFFLINE]);\n        console.log(event[BPProfileModule.FUNCTION_HAVE_HSD]);\n        console.log(event[BPProfileModule.FUNCTION_HAVE_ANGLE_SETTING]);\n        console.log(event[BPProfileModule.FUNCTION_IS_MULTI_UPLOAD]);\n        console.log(event[BPProfileModule.FUNCTION_HAVE_SELF_UPDATE]);\n    }\n});\n")),(0,l.kt)("h3",{id:"get-quantity-of-data-stored-in-the-kn550-device"},"get quantity of data stored in the KN550 device"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP550BTModule.getOfflineNum(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(BP550BTModule.Event_Notify,  (event) => {\n    if (e.action === BPProfileModule.ACTION_HISTORICAL_NUM_BP) {\n        console.log(event[BPProfileModule.HISTORICAL_NUM_BP]);\n    }\n});\n")),(0,l.kt)("h3",{id:"get-data-stored-in-the-kn550-device"},"get data stored in the KN550 device"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'BP550BTModule.getOfflineData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(BP550BTModule.Event_Notify,  (event) => {\n    if (event.action === BPProfileModule.ACTION_HISTORICAL_DATA_BP) {\n        let dataArray = event[BPProfileModule.HISTORICAL_DATA_BP];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n\n                console.log(offlineData[BPProfileModule.MEASUREMENT_DATE_BP]);\n                console.log(offlineData[BPProfileModule.HIGH_BLOOD_PRESSURE_BP]);\n                console.log(offlineData[BPProfileModule.LOW_BLOOD_PRESSURE_BP]);\n                console.log(offlineData[BPProfileModule.PULSE_BP]);\n                console.log(offlineData[BPProfileModule.MEASUREMENT_AHR_BP]);\n                console.log(offlineData[BPProfileModule.MEASUREMENT_HSD_BP]);\n                console.log(offlineData[BPProfileModule.DATAID]);\n            }\n        }\n    }\n});\n')),(0,l.kt)("h3",{id:"disconnect-device"},"disconnect device"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP550BTModule.disconnect(mac);\n")),(0,l.kt)("h3",{id:"get-device-information"},"get device information"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"iHealthDeviceManagerModule.getDevicesIDPS(mac, (event) => {\n    console.info(event);\n})\n")),(0,l.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"BP550BTModule.getAllConnectedDevices();\n")))}f.isMDXComponent=!0}}]);