"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[258],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),v=s(n),u=r,g=v["".concat(l,".").concat(u)]||v[u]||p[u]||i;return n?a.createElement(g,o(o({ref:t},d),{},{components:n})):a.createElement(g,o({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=v;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},6725:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"KN926",sidebar_position:8},o=void 0,c={unversionedId:"android/blood_pressure/kd926",id:"android/blood_pressure/kd926",title:"KN926",description:"WorkFlow",source:"@site/docs/android/blood_pressure/kd926.md",sourceDirName:"android/blood_pressure",slug:"/android/blood_pressure/kd926",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kd926",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_pressure/kd926.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"KN926",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"KD723",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kd723"},next:{title:"HS2",permalink:"/ihealthlabs-sdk-docs/docs/android/scale/hs2"}},l={},s=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for KD926 devices",id:"2scan-for-kd926-devices",level:3},{value:"3.Connect to KD926 devices",id:"3connect-to-kd926-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Get the device battery",id:"get-the-device-battery",level:3},{value:"Set local time to KD926",id:"set-local-time-to-kd926",level:3},{value:"Get the feature of Continua KD926",id:"get-the-feature-of-continua-kd926",level:3},{value:"Set Current user",id:"set-current-user",level:3},{value:"Get history data",id:"get-history-data",level:3},{value:"Disconnect KD926 device",id:"disconnect-kd926-device",level:3}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"workflow"},"WorkFlow"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Scan and connect KD926 scale.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"KD926 only support offline measurement."))),(0,r.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,r.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_KD926);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,r.kt)("h3",{id:"2scan-for-kd926-devices"},"2.Scan for KD926 devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.KD926);\n")),(0,r.kt)("h3",{id:"3connect-to-kd926-devices"},"3.Connect to KD926 devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_KD926)\n\nBp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\n')),(0,r.kt)("h2",{id:"api-reference"},"API reference"),(0,r.kt)("h3",{id:"get-the-device-battery"},"Get the device battery"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Bp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\ncontrol.getBattery();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_BATTERY_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(BpProfile.BATTERY_CBP);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"set-local-time-to-kd926"},"Set local time to KD926"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Bp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\ncontrol.setTime();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_SET_TIME_CBP.equals(action)) {\n            \n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"get-the-feature-of-continua-kd926"},"Get the feature of Continua KD926"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Bp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\ncontrol.getFeature();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_FEATURE_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int bodyMovement   = obj.getInt(BpProfile.FEATURE_BODY_MOVEMENT_CBP);\n                int fitDetection   = obj.getInt(BpProfile.FEATURE_FIT_DETECTION_CBP);\n                int irregularPulse = obj.getInt(BpProfile.FEATURE_IRREGULAR_PULSE_DETECTION_CBP);\n                int pulseRate      = obj.getInt(BpProfile.FEATURE_PULSE_RATE_RANGE_DETECTION_CBP);\n                int measurementPosition = obj.getInt(BpProfile.FEATURE_MEASUREMENT_POSITION_DETECTION_CBP);\n                int multipleBond   = obj.getInt(BpProfile.FEATURE_MULTIPLE_BOND_CBP);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"set-current-user"},"Set Current user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Bp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\ncontrol.commandSetUser(int UserID);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_CONFORM_CHOOSE_USER_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int currentUserId = obj.getInt(BpProfile.CHOOSE_USER_CBP);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"get-history-data"},"Get history data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Bp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\ncontrol.getData();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_HISTORY_DATA_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int measureFlag = obj.getInt(BpProfile.CBPINFO_UNIT);\n                int timestampFlag = obj.getInt(BpProfile.CBPINFO_TIMESTAMP_FLAG);            \n                int pulseRateFlag = obj.getInt(BpProfile.CBPINFO_PULSE_RATE_FLAG);\n                int userIDFlag = obj.getInt(BpProfile.CBPINFO_USER_ID_FLAG);\n                int measureStatusFlag = obj.getInt(BpProfile.CBPINFO_MEASURE_STATUS_FLAG);\n                int hsdFlag = obj.getInt(BpProfile.CBPINFO_HSD_FLAG);\n                int sys = obj.getInt(BpProfile.CBPINFO_SYS);\n                int dia = obj.getInt(BpProfile.CBPINFO_DIA);\n                int map = obj.getInt(BpProfile.CBPINFO_MAP);\n                int measureTime = obj.getInt(BpProfile.CBPINFO_TIMESTAMP);\n                int pulseRate = obj.getInt(BpProfile.CBPINFO_PULSE_RATE);\n              \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"disconnect-kd926-device"},"Disconnect KD926 device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Bp926Control control = iHealthDevicesManager.getInstance().getBp926Control(mDeviceMac);\ncontrol.disconnect();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData) { \n        if (iHealthDevicesManager.DEVICE_STATE_DISCONNECTED == status) {\n            Log.i("The device is disconnected");\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);