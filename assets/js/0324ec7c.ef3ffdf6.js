"use strict";(self.webpackChunkdoc_sdk=self.webpackChunkdoc_sdk||[]).push([[676],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return f}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=a,v=u["".concat(s,".").concat(f)]||u[f]||g[f]||r;return n?i.createElement(v,o(o({ref:t},d),{},{components:n})):i.createElement(v,o({ref:t},d))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},8215:function(e,t,n){var i=n(7294);t.Z=function(e){var t=e.children,n=e.hidden,a=e.className;return i.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},5064:function(e,t,n){n.d(t,{Z:function(){return c}});var i=n(7294),a=n(9443);var r=function(){var e=(0,i.useContext)(a.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=n(6010),l="tabItem_1uMI",s="tabItemActive_2DSg";var c=function(e){var t,n=e.lazy,a=e.block,c=e.defaultValue,d=e.values,g=e.groupId,u=e.className,f=i.Children.toArray(e.children),v=null!=d?d:f.map((function(e){return{value:e.props.value,label:e.props.label}})),S=null!=c?c:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value,m=r(),p=m.tabGroupChoices,b=m.setTabGroupChoices,_=(0,i.useState)(S),h=_[0],N=_[1],T=[];if(null!=g){var y=p[g];null!=y&&y!==h&&v.some((function(e){return e.value===y}))&&N(y)}var H=function(e){var t=e.currentTarget,n=T.indexOf(t),i=v[n].value;N(i),null!=g&&(b(g,i),setTimeout((function(){var e,n,i,a,r,o,l,c;(e=t.getBoundingClientRect(),n=e.top,i=e.left,a=e.bottom,r=e.right,o=window,l=o.innerHeight,c=o.innerWidth,n>=0&&r<=c&&a<=l&&i>=0)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(s),setTimeout((function(){return t.classList.remove(s)}),2e3))}),150))},O=function(e){var t,n=null;switch(e.key){case"ArrowRight":var i=T.indexOf(e.target)+1;n=T[i]||T[0];break;case"ArrowLeft":var a=T.indexOf(e.target)-1;n=T[a]||T[T.length-1]}null==(t=n)||t.focus()};return i.createElement("div",{className:"tabs-container"},i.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":a},u)},v.map((function(e){var t=e.value,n=e.label;return i.createElement("li",{role:"tab",tabIndex:h===t?0:-1,"aria-selected":h===t,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":h===t}),key:t,ref:function(e){return T.push(e)},onKeyDown:O,onFocus:H,onClick:H},null!=n?n:t)}))),n?(0,i.cloneElement)(f.filter((function(e){return e.props.value===h}))[0],{className:"margin-vert--md"}):i.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,i.cloneElement)(e,{key:t,hidden:e.props.value!==h})}))))}},9443:function(e,t,n){var i=(0,n(7294).createContext)(void 0);t.Z=i},9112:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return g},toc:function(){return u},default:function(){return v}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),o=n(5064),l=n(8215),s=["components"],c={id:"hs2s",title:"HS2S"},d=void 0,g={unversionedId:"device/hs2s",id:"device/hs2s",isDocsHomePage:!1,title:"HS2S",description:"WorkFlow",source:"@site/docs/device/hs2s.md",sourceDirName:"device",slug:"/device/hs2s",permalink:"/doc.sdk.ihealthlabs/docs/device/hs2s",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/device/hs2s.md",tags:[],version:"current",frontMatter:{id:"hs2s",title:"HS2S"},sidebar:"tutorialSidebar",previous:{title:"HS2",permalink:"/doc.sdk.ihealthlabs/docs/device/hs2"},next:{title:"HS4S",permalink:"/doc.sdk.ihealthlabs/docs/device/hs4s"}},u=[{value:"WorkFlow",id:"workflow",children:[]},{value:"Connection to device",id:"connection-to-device",children:[{value:"1.Listen to device notify",id:"1listen-to-device-notify",children:[]},{value:"2.Scan for HS2S devices",id:"2scan-for-hs2s-devices",children:[]},{value:"3.Connect to HS2S devices",id:"3connect-to-hs2s-devices",children:[]}]},{value:"API reference",id:"api-reference",children:[{value:"Get the device info",id:"get-the-device-info",children:[]},{value:"Get the battery info",id:"get-the-battery-info",children:[]},{value:"Set the unit of device",id:"set-the-unit-of-device",children:[]},{value:"Get the info of user in hs2s",id:"get-the-info-of-user-in-hs2s",children:[]},{value:"Create or update user info in device",id:"create-or-update-user-info-in-device",children:[]},{value:"Delete user info in device",id:"delete-user-info-in-device",children:[]},{value:"Specify tourist users",id:"specify-tourist-users",children:[]},{value:"Specify Online Users",id:"specify-online-users",children:[]},{value:"Get off line data count",id:"get-off-line-data-count",children:[]},{value:"Get offline data",id:"get-offline-data",children:[]},{value:"Delete offline data",id:"delete-offline-data",children:[]}]},{value:"import HS2S module",id:"import-hs2s-module",children:[]},{value:"APIs",id:"apis",children:[{value:"add and remove listener",id:"add-and-remove-listener",children:[]},{value:"get device information",id:"get-device-information",children:[]},{value:"get device battery",id:"get-device-battery",children:[]},{value:"set Unit",id:"set-unit",children:[]},{value:"get user information",id:"get-user-information",children:[]},{value:"create user",id:"create-user",children:[]},{value:"delete user",id:"delete-user",children:[]},{value:"get the number of offline data",id:"get-the-number-of-offline-data",children:[]},{value:"get offline data",id:"get-offline-data-1",children:[]},{value:"delete offline data by user id",id:"delete-offline-data-by-user-id",children:[]},{value:"get the number of anonymous offline data",id:"get-the-number-of-anonymous-offline-data",children:[]},{value:"get anonymous offline data",id:"get-anonymous-offline-data",children:[]},{value:"delete anonymous offline data",id:"delete-anonymous-offline-data",children:[]},{value:"start a online measurement",id:"start-a-online-measurement",children:[]},{value:"start heart rate measurement mode",id:"start-heart-rate-measurement-mode",children:[]},{value:"stop heart rate measurement mode",id:"stop-heart-rate-measurement-mode",children:[]},{value:"reset device",id:"reset-device",children:[]},{value:"disconnect device",id:"disconnect-device",children:[]},{value:"get all connected devices",id:"get-all-connected-devices",children:[]}]}],f={toc:u};function v(e){var t=e.components,n=(0,a.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(o.Z,{mdxType:"Tabs"},(0,r.kt)(l.Z,{value:"android",label:"Android",default:!0,mdxType:"TabItem"},(0,r.kt)("h2",{id:"workflow"},"WorkFlow"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Scan and connect Hs2s scale.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get device info, if don't have any user info, create a user info and take a measure directly.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get user info, if have this user info, get data stored in hs2s. if don't have this user info, create a user info.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Get offline data and take measurement."))),(0,r.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,r.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"int callbackId = iHealthDevicesManager.getInstance().registerClientCallback(new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) {\n\n    }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData) {\n\n    }\n\n    @Override\n    public void onScanError(String reason, long latency) {\n        \n    }\n\n    @Override\n    public void onScanFinish() {\n       \n    }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) {\n                                    \n    }\n});\n\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_HS2S);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,r.kt)("h3",{id:"2scan-for-hs2s-devices"},"2.Scan for HS2S devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.HS2S);\n")),(0,r.kt)("h3",{id:"3connect-to-hs2s-devices"},"3.Connect to HS2S devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_HS2S)\n\nHs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\n')),(0,r.kt)("h2",{id:"api-reference"},"API reference"),(0,r.kt)("h3",{id:"get-the-device-info"},"Get the device info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.getDeviceInfo();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_GET_DEVICE_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int userCount = obj.getInt(Hs2sProfile.HS_USER_COUNT)\n                int unit = obj.getInt(Hs2sProfile.HS_UNIT_CURRENT)\n                int bettery = obj.getInt(Hs2sProfile.BATTERY_HS)\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"get-the-battery-info"},"Get the battery info"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.getBattery();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_BATTERY_HS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(Hs2sProfile.BATTERY_HS)\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"set-the-unit-of-device"},"Set the unit of device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\n\n//  Hs2sProfile#UNIT_LB}  <br>  {@link Hs2sProfile#UNIT_ST\ncontrol.setUnit(Hs2sProfile.UNIT_KG);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_SET_UNIT_SUCCESS.equals(action)) {\n            \n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"get-the-info-of-user-in-hs2s"},"Get the info of user in hs2s"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.getUserInfo();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_GET_USER_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int userCount = obj.getInt(Hs2sProfile.USER_INFO_COUNT);\n                JSONArray userArr = obj.gegetJSONArray(Hs2sProfile.USER_INFO_ARRAY);\n                for (int i = 0; i < userCount; i++) {\n                    JSONObject user = userArr.getJSONObject(i);\n\n                    String    userId = user.getString(Hs2sProfile.USER_INFO_USER_ID);\n                    long        time = user.getLong(Hs2sProfile.USER_INFO_CREATE_TIME);\n                    String    weigth = user.getString(Hs2sProfile.USER_INFO_WEIGHT);\n                    int       gender = user.getInt(Hs2sProfile.USER_INFO_GENDER);\n                    int          age = user.getInt(Hs2sProfile.USER_INFO_AGE);\n                    int       height = user.getInt(Hs2sProfile.USER_INFO_HEIGHT);\n                    int bodybuilding = user.getInt(Hs2sProfile.USER_INFO_BODYBUILDING);\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"create-or-update-user-info-in-device"},"Create or update user info in device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\n/*\n * @param id           User id  (The length of ID must be 16)\n * @param weight       weight   (unit kg     range: 20kg-180kg)\n * @param gender       0:women      1:man\n * @param age          age    18-99  (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param height       height  90-220 cm    (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param impedance    0:No body fat measurement    1:body fat measurement\n * @param bodybuilding 0:No   Bodybuilding          1:Bodybuilding\n */\ncontrol.createOrUpdateUserInfo(String id, float weight, int gender, int age, int height, int impedance, int bodybuilding);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_CREATE_OR_UPDATE_USER_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n                \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"delete-user-info-in-device"},"Delete user info in device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.deleteUserInfo(String id);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_DELETE_USER_INFO.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n               String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"specify-tourist-users"},"Specify tourist users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.specifyTouristUsers();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_SPECIFY_USERS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_REAL_TIME_WEIGHT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String dataId = obj.getInt(Hs2sProfile.DATA_ID);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"specify-online-users"},"Specify Online Users"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\n/*\n * @param id           User id  (The length of ID must be 16)\n * @param weight       weight   (unit kg     range: 20kg-180kg)\n * @param gender       0:women      1:man\n * @param age          age    18-99  (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param height       height  90-220 cm    (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param impedance    0:No body fat measurement    1:body fat measurement\n * @param bodybuilding 0:No   Bodybuilding          1:Bodybuilding\n */\ncontrol.specifyOnlineUsers(String id, \n                           float weight, \n                           int gender,\n                           int age, \n                           int height, \n                           int impedance,\n                           int bodybuilding)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_SPECIFY_USERS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_REAL_TIME_WEIGHT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String dataId = obj.getInt(Hs2sProfile.DATA_ID);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String dataId = obj.getInt(Hs2sProfile.DATA_ID);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.DATA_BODY_FAT_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                Double weight = obj.getDouble(Hs2sProfile.OPERATION_DESCRIBE);\n                String dataId = obj.getString(Hs2sProfile.DATA_ID);\n                Double description = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                int userCount = obj.getString(Hs2sProfile.DATA_USER_NUM);\n                int gender = obj.getString(Hs2sProfile.DATA_GENDER);\n                int age = obj.getString(Hs2sProfile.DATA_AGE);\n                int height = obj.getString(Hs2sProfile.DATA_HEIGHT);\n                long measureTs = obj.getLong(Hs2sProfile.DATA_MEASURE_TIME);\n                int bodyBuilding = obj.getInt(Hs2sProfile.DATA_BODYBUILDING);\n                int type = obj.getInt(Hs2sProfile.DATA_INSTRUCTION_TYPE);\n\n                JSONObject objResult = obj.getJSONObject(Hs2sProfile.DATA_BODY_FAT_RESULT);\n                String bodyFit = obj.getString(Hs2sProfile.DATA_BODY_FIT_PERCENTAGE);\n                String muscleMass = obj.getString(Hs2sProfile.DATA_MUSCLE_MASS);\n                String boneSaltContent = obj.getString(Hs2sProfile.DATA_BONE_SALT_CONTENT);\n                String bodyWater = obj.getString(Hs2sProfile.DATA_BODY_WATER_RATE);\n                String protein = obj.getString(Hs2sProfile.DATA_PROTEIN_RATE);\n                String skeletalMuscleMass = obj.getString(Hs2sProfile.DATA_SKELETAL_MUSCLE_MASS);\n                String visceralFat = obj.getString(Hs2sProfile.DATA_VISCERAL_FAT_GRADE);\n                String physicalAge = obj.getString(Hs2sProfile.DATA_PHYSICAL_AGE);\n                String standardWeight = obj.getString(Hs2sProfile.DATA_STANDARD_WEIGHT);\n                String weightControl = obj.getString(Hs2sProfile.DATA_WEIGHT_CONTROL);\n                String muscleControl = obj.getString(Hs2sProfile.DATA_MUSCLE_CONTROL);\n                String fatControl = obj.getString(Hs2sProfile.DATA_FAT_CONTROL);\n                String fatWeight = obj.getString(Hs2sProfile.DATA_FAT_WEIGHT);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,r.kt)("h3",{id:"get-off-line-data-count"},"Get off line data count"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.getOfflineDataCount(String... IDArray);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_HISTORY_DATA_NUM.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int userCount = obj.getInt(Hs2sProfile.HISTORY_DATA_USER_COUNT);\n                JSONArray countArr = obj.gegetJSONArray(Hs2sProfile.HISTORY_DATA_COUNT_ARRAY);\n                for (int i = 0; i < userCount; i++) {\n                    JSONObject countObj = userArr.getJSONObject(i);\n                    int count = countObj.getInt(Hs2sProfile.HISTORY_DATA_COUNT);\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"get-offline-data"},"Get offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.getOfflineData(String id) \n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_HISTORY_DATA.equals(action)) {\n            try {\n                JSONArray historyArr = new JSONArray(message);\n                for (int i = 0; i < historyArr.length(); i++) {\n                    JSONObject obj = historyArr.getJSONObject(i);\n                    int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                    Double weight = obj.getDouble(Hs2sProfile.OPERATION_DESCRIBE);\n                    String dataId = obj.getString(Hs2sProfile.DATA_ID);\n                    Double description = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                    int userCount = obj.getString(Hs2sProfile.DATA_USER_NUM);\n                    int gender = obj.getString(Hs2sProfile.DATA_GENDER);\n                    int age = obj.getString(Hs2sProfile.DATA_AGE);\n                    int height = obj.getString(Hs2sProfile.DATA_HEIGHT);\n                    long measureTs = obj.getLong(Hs2sProfile.DATA_MEASURE_TIME);\n                    int bodyBuilding = obj.getInt(Hs2sProfile.DATA_BODYBUILDING);\n                    int type = obj.getInt(Hs2sProfile.DATA_INSTRUCTION_TYPE);\n\n                    JSONObject objResult = obj.getJSONObject(Hs2sProfile.DATA_BODY_FAT_RESULT);\n                    String bodyFit = obj.getString(Hs2sProfile.DATA_BODY_FIT_PERCENTAGE);\n                    String muscleMass = obj.getString(Hs2sProfile.DATA_MUSCLE_MASS);\n                    String boneSaltContent = obj.getString(Hs2sProfile.DATA_BONE_SALT_CONTENT);\n                    String bodyWater = obj.getString(Hs2sProfile.DATA_BODY_WATER_RATE);\n                    String protein = obj.getString(Hs2sProfile.DATA_PROTEIN_RATE);\n                    String skeletalMuscleMass = obj.getString(Hs2sProfile.DATA_SKELETAL_MUSCLE_MASS);\n                    String visceralFat = obj.getString(Hs2sProfile.DATA_VISCERAL_FAT_GRADE);\n                    String physicalAge = obj.getString(Hs2sProfile.DATA_PHYSICAL_AGE);\n                    String standardWeight = obj.getString(Hs2sProfile.DATA_STANDARD_WEIGHT);\n                    String weightControl = obj.getString(Hs2sProfile.DATA_WEIGHT_CONTROL);\n                    String muscleControl = obj.getString(Hs2sProfile.DATA_MUSCLE_CONTROL);\n                    String fatControl = obj.getString(Hs2sProfile.DATA_FAT_CONTROL);\n                    String fatWeight = obj.getString(Hs2sProfile.DATA_FAT_WEIGHT);\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"delete-offline-data"},"Delete offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sControl control = iHealthDevicesManager.getInstance().getHs2sControl(mDeviceMac);\ncontrol.deleteOfflineData(String id);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_DELETE_HISTORY_DATA.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS)\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE)\n               \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n"))),(0,r.kt)(l.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,r.kt)("h4",{id:"ios-doc"},"iOS Doc")),(0,r.kt)(l.Z,{value:"reactnative",label:"React Native",mdxType:"TabItem"},(0,r.kt)("h2",{id:"import-hs2s-module"},"import HS2S module"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  HS2SModule,\n  HS2SProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,r.kt)("h2",{id:"apis"},"APIs"),(0,r.kt)("h3",{id:"add-and-remove-listener"},"add and remove listener"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,r.kt)("h3",{id:"get-device-information"},"get device information"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getDeviceInfo(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_get_device_info") {\n       console.log(event["battery"]);\n       console.log(event["unit_current"]);\n       console.log(event["user_count"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"get-device-battery"},"get device battery"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getBattery(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_get_battery_hs") {\n       console.log(event["battery_hs"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"set-unit"},"set Unit"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.setUnit(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_set_unit") {\n       console.log(event["result"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"get-user-information"},"get user information"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getUserInfo(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_get_user_info") {\n       console.log(event["user_info-count"]);\n       let array = event["user_info_array"];\n       console.log(array["body_building"]);\n       console.log(array["impedance"]);\n       console.log(array["height"]);\n       console.log(array["age"]);\n       console.log(array["gender"]);\n       console.log(array["weight"]);\n       console.log(array["create_time"]);\n       console.log(array["user_id"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"create-user"},"create user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.updateUserInfo(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_create_or_update_user_info") {\n       console.log(event["result"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"delete-user"},"delete user"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.deleteUser(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_delete_user_info") {\n       console.log(event["result"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"get-the-number-of-offline-data"},"get the number of offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getMemoryDataCount(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_history_data_num") {\n       console.log(event["history_data_count"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"get-offline-data-1"},"get offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getMemoryData(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_history_data") {\n        let arr = event["history_data"];\n        arr.forEach(function(result) {\n            console.log(result["fat_weight"]);\n            console.log(result["fat_control"];\n            console.log(result["weight_control"];\n            console.log(result["standard_weight"];\n            console.log(result["skeletal_muscle_mass"];\n            console.log(result["body_water_rate"];\n            console.log(result["muscle_mas"];\n            console.log(result["instruction_type"];\n            console.log(result["body_building"];\n            console.log(result["height"];\n            console.log(result["gender"];\n            console.log(result["muscle_control"];\n            console.log(result["physical_age"];\n            console.log(result["visceral_fat_grade"];\n            console.log(result["protein_rate"];\n            console.log(result["bone_salt_content"];\n            console.log(result["visceral_fat_grade"];\n            console.log(result["measure_time"];\n            console.log(result["age"];\n            console.log(result["impedance"];\n            console.log(result["weight"];\n       })\n    }\n}\n')),(0,r.kt)("h3",{id:"delete-offline-data-by-user-id"},"delete offline data by user id"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.deleteMemoryData(mac, userId);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_delete_history_data") {\n       console.log(event["result"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"get-the-number-of-anonymous-offline-data"},"get the number of anonymous offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getAnonymousMemoryDataCount(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_anonymous_data_num") {\n       console.log(event["anonymous_data_count"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"get-anonymous-offline-data"},"get anonymous offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.getAnonymousMemoryData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_anonymous_data") {\n        let arr = event["history_data"];\n        arr.forEach(function(result) {\n            console.log(result["instruction_type"];\n            console.log(result["body_building"];\n            console.log(result["height"];\n            console.log(result["gender"];\n            console.log(result["measure_time"];\n            console.log(result["age"];\n            console.log(result["impedance"];\n            console.log(result["weight"];\n       })\n    }\n}\n')),(0,r.kt)("h3",{id:"delete-anonymous-offline-data"},"delete anonymous offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.deleteAnonymousMemoryData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_delete_anonymous_data") {\n       console.log(event["result"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"start-a-online-measurement"},"start a online measurement"),(0,r.kt)("p",null,"The API is asyn function. It will return message until finish measurement."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.measure(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_specify_users") {\n        console.log(event["result"]);\n        // 1: success, 0: failure\n\n    } else if (event.action === "action_online_real_time_weight") {\n        console.log(event["weight"]);\n\n    } else if (event.action === "action_online_result") {\n        console.log(event["weight"]);\n\n    } else if (event.action === "action_body_fat_result") {\n        let bodyFat = event["data_body_fat_result"];\n        let fat_weight = bodyFat["fat_weight"];\n        let fat_control = bodyFat["fat_control"];\n        let weight_control = bodyFat["weight_control"];\n        let standard_weight = bodyFat["standard_weight"];\n        let skeletal_muscle_mass = bodyFat["skeletal_muscle_mass"];\n        let body_water_rate = bodyFat["body_water_rate"];\n        let muscle_mas = bodyFat["muscle_mas"];\n        let instruction_type = bodyFat["instruction_type"];\n        let body_building = bodyFat["body_building"];\n        let height = bodyFat["height"];\n        let gender = bodyFat["gender"];\n        let muscle_control = bodyFat["muscle_control"];\n        let physical_age = bodyFat["physical_age"];\n        let visceral_fat_grade = bodyFat["visceral_fat_grade"];\n        let protein_rate = bodyFat["protein_rate"];\n        let bone_salt_content = bodyFat["bone_salt_content"];\n        let visceral_fat_grade = bodyFat["visceral_fat_grade"];\n        let measure_time = bodyFat["measure_time"];\n        let age = bodyFat["age"];\n        let impedance = bodyFat["impedance"];\n        let weight = bodyFat["weight"];\n\n    } else if (event.action === "action_measure_finish_at_critical") { }\n});\n')),(0,r.kt)("h3",{id:"start-heart-rate-measurement-mode"},"start heart rate measurement mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"HS2SModule.resetDevice(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === HS2SProfileModule.ACTION_HS2S_MEASURE_HEARTRATE) {\n       \n    }\n}\n")),(0,r.kt)("h3",{id:"stop-heart-rate-measurement-mode"},"stop heart rate measurement mode"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.resetDevice(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === HS2SProfileModule.ACTION_HS2S_EXIT_MEASURE_HEARTRATE_STATUS) {\n        // {"status":0,"heartrate":78}\n       console.log(event.message);\n    }\n}\n')),(0,r.kt)("h3",{id:"reset-device"},"reset device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'HS2SModule.resetDevice(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS2SModule.Event_Notify,  (event) => {\n    if (event.action === "action_restore_factory_settings") {\n       console.log(event["result"]);\n    }\n}\n')),(0,r.kt)("h3",{id:"disconnect-device"},"disconnect device"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"HS2SModule.disConnect(mac);\n")),(0,r.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"HS2SModule.getAllConnectedDevices();\n")))))}v.isMDXComponent=!0},6010:function(e,t,n){function i(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=i(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}function a(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=i(e))&&(a&&(a+=" "),a+=t);return a}n.d(t,{Z:function(){return a}})}}]);