"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7138],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return v}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=s(n),v=o,p=u["".concat(l,".").concat(v)]||u[v]||g[v]||i;return n?a.createElement(p,r(r({ref:t},d),{},{components:n})):a.createElement(p,r({ref:t},d))}));function v(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,r[1]=c;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5923:function(e,t,n){n.r(t),n.d(t,{assets:function(){return d},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return g}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],c={title:"BG1S",sidebar_position:2},l=void 0,s={unversionedId:"android/blood_glucose/bg1s",id:"android/blood_glucose/bg1s",title:"BG1S",description:"Connection workflow",source:"@site/docs/android/blood_glucose/bg1s.md",sourceDirName:"android/blood_glucose",slug:"/android/blood_glucose/bg1s",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg1s",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_glucose/bg1s.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"BG1S",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"BG1",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg1"},next:{title:"BG5",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg5"}},d={},g=[{value:"Connection workflow",id:"connection-workflow",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for BG1S devices",id:"2scan-for-bg1s-devices",level:3},{value:"3.Connect to BG1S devices",id:"3connect-to-bg1s-devices",level:3},{value:"Connection to device",id:"connection-to-device",level:2},{value:"API reference",id:"api-reference",level:2},{value:"Get the measure mode of BG1S",id:"get-the-measure-mode-of-bg1s",level:3},{value:"Set the measure mode of BG1S",id:"set-the-measure-mode-of-bg1s",level:3},{value:"Get the device code of BG1S",id:"get-the-device-code-of-bg1s",level:3},{value:"Set the device code of BG1S",id:"set-the-device-code-of-bg1s",level:3},{value:"Start measure",id:"start-measure",level:3}],u={toc:g};function v(e){var t=e.components,n=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"connection-workflow"},"Connection workflow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect BG1S blood glucose monitor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"BG1S only support online measurement."))),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_BG1S);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-bg1s-devices"},"2.Scan for BG1S devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.BG1S);\n")),(0,i.kt)("h3",{id:"3connect-to-bg1s-devices"},"3.Connect to BG1S devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_BG1S)\n\nBg1sControl control = iHealthDevicesManager.getInstance().getBg1sControl(mDeviceMac);\n')),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-the-measure-mode-of-bg1s"},"Get the measure mode of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1sControl control = iHealthDevicesManager.getInstance().getBg1sControl(mDeviceMac);\ncontrol.getDeviceStatus();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1sProfile.ACTION_GET_DEVICE_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(Bg1sProfile.INFO_BATTERY_BG1S);\n                int bloodCode = obj.getInt(Bg1sProfile.INFO_VERSION_CODE_BLOOD_BG1S);\n                int ctlCode = obj.getInt(Bg1sProfile.INFO_VERSION_CODE_CTL_BG1S);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-the-measure-mode-of-bg1s"},"Set the measure mode of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * set the measure mode of Bg1s :\n * <ul><li>0:Blood mode</li></ul>\n * <ul><li>1:CTL mode.</li></ul> \n **/\nBg1sControl control = iHealthDevicesManager.getInstance().getBg1sControl(mDeviceMac);\ncontrol.setMeasureMode(int mode);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1sProfile.ACTION_SET_MEASURE_MODE.equals(action)) {\n           try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Bg1sProfile.OPERATION_STATUS);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-the-device-code-of-bg1s"},"Get the device code of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1sControl control = iHealthDevicesManager.getInstance().getBg1sControl(mDeviceMac);\ncontrol.queryDeviceCode();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1sProfile.ACTION_CHECK_CODE.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int bloodCodeCheckResult = obj.getInt(Bg1sProfile.BLOOD_CHECK_CODE_RESULT);\n                int bloodCode = obj.getInt(Bg1sProfile.BLOOD_CODE);\n                int bloodCodeCRC = obj.getInt(Bg1sProfile.BLOOD_CODE_CRC);\n                int ctlCheckResult = obj.getInt(Bg1sProfile.CTL_CHECK_CODE_RESULT);\n                int ctlCode = obj.getInt(Bg1sProfile.CTL_CODE);\n                int ctlCodeCRC = obj.getInt(Bg1sProfile.CTL_CODE_CRC);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-the-device-code-of-bg1s"},"Set the device code of BG1S"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1sControl control = iHealthDevicesManager.getInstance().getBg1sControl(mDeviceMac);\ncontrol.setDeviceCode(byte[] code);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1sProfile.ACTION_CHECK_CODE.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Bg1sProfile.STRIP_INSERTION_STATUS);\n                String describe = obj.getString(Bg1sProfile.OPERATION_DESCRIBE);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"start-measure"},"Start measure"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg5sControl control = iHealthDevicesManager.getInstance().getBg5sControl(mDeviceMac);\n/**\n * @param measureType the measure type set to BG5S.Can be one of\n *                    {@link Bg5sProfile#MEASURE_BLOOD}  or\n *                    {@link Bg5sProfile#MEASURE_CTL}\n */\ncontrol.startMeasure(int measureType);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1sProfile.ACTION_STRIP_INSERTION_STATUS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt((Bg1sProfile.STRIP_INSERTION_STATUS);\n                if (1 == status) {\n                    Log.i("test strip in")\n                } else if (2 == status) {\n                    Log.i("test strip out")\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n\n        } else if (Bg1sProfile.ACTION_GET_BLOOD.equals(action)) {\n            Log.i("test drop blood")\n\n        } else if (Bg1sProfile.ACTION_MEASURE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int value = obj.getInt(Bg1sProfile.MEASURE_RESULT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } \n    } \n}\n')))}v.isMDXComponent=!0}}]);