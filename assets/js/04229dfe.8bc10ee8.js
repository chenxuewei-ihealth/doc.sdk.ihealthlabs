"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2565],{3905:(e,t,n)=>{n.d(t,{Zo:()=>g,kt:()=>p});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},g=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,l=e.parentName,g=s(e,["components","mdxType","originalType","parentName"]),u=c(n),p=a,S=u["".concat(l,".").concat(p)]||u[p]||d[p]||r;return n?i.createElement(S,o(o({ref:t},g),{},{components:n})):i.createElement(S,o({ref:t},g))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<r;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9111:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var i=n(7462),a=(n(7294),n(3905));const r={title:"HS2S Pro",sidebar_position:8},o=void 0,s={unversionedId:"android/scale/hs2sPro",id:"android/scale/hs2sPro",title:"HS2S Pro",description:"WorkFlow",source:"@site/docs/android/scale/hs2sPro.md",sourceDirName:"android/scale",slug:"/android/scale/hs2sPro",permalink:"/ihealthlabs-sdk-docs/docs/android/scale/hs2sPro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/scale/hs2sPro.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{title:"HS2S Pro",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"HS6",permalink:"/ihealthlabs-sdk-docs/docs/android/scale/hs6"},next:{title:"BG1",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg1"}},l={},c=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for HS2S Pro devices",id:"2scan-for-hs2s-pro-devices",level:3},{value:"3.Connect to HS2S Pro devices",id:"3connect-to-hs2s-pro-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Get the device info",id:"get-the-device-info",level:3},{value:"Get the battery info",id:"get-the-battery-info",level:3},{value:"Set the unit of device",id:"set-the-unit-of-device",level:3},{value:"Get the info of user in hs2s pro",id:"get-the-info-of-user-in-hs2s-pro",level:3},{value:"Create or update user info in device",id:"create-or-update-user-info-in-device",level:3},{value:"Delete user info in device",id:"delete-user-info-in-device",level:3},{value:"Specify tourist users",id:"specify-tourist-users",level:3},{value:"Specify Online Users",id:"specify-online-users",level:3},{value:"Get off line data count",id:"get-off-line-data-count",level:3},{value:"Get offline data",id:"get-offline-data",level:3},{value:"Delete offline data",id:"delete-offline-data",level:3},{value:"Start heart rate measurement mode",id:"start-heart-rate-measurement-mode",level:3},{value:"Stop heart rate measurement mode",id:"stop-heart-rate-measurement-mode",level:3}],g={toc:c};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"workflow"},"WorkFlow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Scan and connect Hs2s Pro scale.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Get device info, if don't have any user info, create a user info and take a measure directly.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Get user info, if have this user info, get data stored in hs2s pro. if don't have this user info, create a user info.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Get offline data and take measurement."))),(0,a.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,a.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n\n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_HS2SPRO);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,a.kt)("h3",{id:"2scan-for-hs2s-pro-devices"},"2.Scan for HS2S Pro devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.HS2SPRO);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Return\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n\n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) {\n        Log.i(TAG, "onScanDevice - mac:" + mac + " - deviceType:" + deviceType + " - rssi:" + rssi + " - manufactorData:" + manufactorData);\n    }\n}\n')),(0,a.kt)("h3",{id:"3connect-to-hs2s-pro-devices"},"3.Connect to HS2S Pro devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_HS2SPRO)\n\nHs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\n')),(0,a.kt)("h2",{id:"api-reference"},"API reference"),(0,a.kt)("h3",{id:"get-the-device-info"},"Get the device info"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.getDeviceInfo();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_GET_DEVICE_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int userCount = obj.getInt(Hs2sProfile.HS_USER_COUNT)\n                int unit = obj.getInt(Hs2sProfile.HS_UNIT_CURRENT)\n                int bettery = obj.getInt(Hs2sProfile.BATTERY_HS)\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"get-the-battery-info"},"Get the battery info"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.getBattery();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_BATTERY_HS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(Hs2sProfile.BATTERY_HS)\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"set-the-unit-of-device"},"Set the unit of device"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\n\n//  Hs2sProfile#UNIT_LB}  <br>  {@link Hs2sProfile#UNIT_ST\ncontrol.setUnit(Hs2sProfile.UNIT_KG);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_SET_UNIT_SUCCESS.equals(action)) {\n\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"get-the-info-of-user-in-hs2s-pro"},"Get the info of user in hs2s pro"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.getUserInfo();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_GET_USER_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int userCount = obj.getInt(Hs2sProfile.USER_INFO_COUNT);\n                JSONArray userArr = obj.gegetJSONArray(Hs2sProfile.USER_INFO_ARRAY);\n                for (int i = 0; i < userCount; i++) {\n                    JSONObject user = userArr.getJSONObject(i);\n\n                    String    userId = user.getString(Hs2sProfile.USER_INFO_USER_ID);\n                    long        time = user.getLong(Hs2sProfile.USER_INFO_CREATE_TIME);\n                    String    weigth = user.getString(Hs2sProfile.USER_INFO_WEIGHT);\n                    int       gender = user.getInt(Hs2sProfile.USER_INFO_GENDER);\n                    int          age = user.getInt(Hs2sProfile.USER_INFO_AGE);\n                    int       height = user.getInt(Hs2sProfile.USER_INFO_HEIGHT);\n                    int    impedance = user.getInt(Hs2sProfile.USER_INFO_IMPEDANCE);\n                    int bodybuilding = user.getInt(Hs2sProfile.USER_INFO_BODYBUILDING);\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"create-or-update-user-info-in-device"},"Create or update user info in device"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\n/*\n * @param id           User id  (The length of ID must be 16)\n * @param weight       weight   (unit kg     range: 20kg-180kg)\n * @param gender       0:women      1:man\n * @param age          age    18-99  (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param height       height  90-220 cm    (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param impedance    0:No body fat measurement    1:body fat measurement\n * @param bodybuilding 0:No   Bodybuilding          1:Bodybuilding\n */\ncontrol.createOrUpdateUserInfo(String id, float weight, int gender, int age, int height, int impedance, int bodybuilding);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_CREATE_OR_UPDATE_USER_INFO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"delete-user-info-in-device"},"Delete user info in device"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.deleteUserInfo(String id);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_DELETE_USER_INFO.equals(action)) {\n            try {\n               JSONObject obj = new JSONObject(message);\n               int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n               String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"specify-tourist-users"},"Specify tourist users"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.specifyTouristUsers();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_SPECIFY_USERS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_REAL_TIME_WEIGHT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String dataId = obj.getInt(Hs2sProfile.DATA_ID);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"specify-online-users"},"Specify Online Users"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\n/*\n * @param id           User id  (The length of ID must be 16)\n * @param weight       weight   (unit kg     range: 20kg-180kg)\n * @param gender       0:women      1:man\n * @param age          age    18-99  (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param height       height  90-220 cm    (If it is not within this range, it is impossible to measure the constitution correctly.)\n * @param impedance    0:No body fat measurement    1:body fat measurement\n * @param bodybuilding 0:No   Bodybuilding          1:Bodybuilding\n */\ncontrol.specifyOnlineUsers(String id,\n                           float weight,\n                           int gender,\n                           int age,\n                           int height,\n                           int impedance,\n                           int bodybuilding)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_SPECIFY_USERS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_REAL_TIME_WEIGHT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.ACTION_ONLINE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String dataId = obj.getInt(Hs2sProfile.DATA_ID);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (Hs2sProfile.DATA_BODY_FAT_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getDouble(Hs2sProfile.OPERATION_DESCRIBE);\n                Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                String dataId = obj.getString(Hs2sProfile.DATA_ID);\n                JSONArray impedanceArray = obj.getJSONArray(Hs2sProfile.DATA_IMPEDANCE);\n                for (int i = 0; i < impedanceArray.length(); i++) {\n                    int impedance = impedanceArray.getInt(Hs2sProfile.DATA_IMPEDANCE);\n\n                }\n                int userCount = obj.getString(Hs2sProfile.DATA_USER_NUM);\n                int gender = obj.getString(Hs2sProfile.DATA_GENDER);\n                int age = obj.getString(Hs2sProfile.DATA_AGE);\n                int height = obj.getString(Hs2sProfile.DATA_HEIGHT);\n                long measureTs = obj.getLong(Hs2sProfile.DATA_MEASURE_TIME);\n                int correctTime = obj.getInt(Hs2sProfile.DATA_RIGHT_TIME);\n                int bodyBuilding = obj.getInt(Hs2sProfile.DATA_BODYBUILDING);\n                int type = obj.getInt(Hs2sProfile.DATA_INSTRUCTION_TYPE);\n                int impedanceErrorType = obj.getInt(Hs2sProfile.DATA_IMPEDANCE_ERRORS);\n                \n                if(type == 1){\n                    int bodyFit = obj.getString(Hs2sProfile.DATA_BODY_FIT_PERCENTAGE);\n                    int muscleMass = obj.getString(Hs2sProfile.DATA_MUSCLE_MASS);\n                    int boneSaltContent = obj.getString(Hs2sProfile.DATA_BONE_SALT_CONTENT);\n                    int bodyWater = obj.getString(Hs2sProfile.DATA_BODY_WATER_RATE);\n                    int protein = obj.getString(Hs2sProfile.DATA_PROTEIN_RATE);\n                    int footEncryptionImpedance = obj.getString(Hs2sProfile.DATA_IMPEDANCE_ENCRYPT);\n                }\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"get-off-line-data-count"},"Get off line data count"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.getOfflineDataCount(String userId);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_HISTORY_DATA_NUM.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int count = countObj.getInt(Hs2sProfile.HISTORY_DATA_COUNT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"get-offline-data"},"Get offline data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.getOfflineData(String id)\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_HISTORY_DATA.equals(action)) {\n            try {\n                JSONArray historyArr = new JSONArray(message);\n                for (int i = 0; i < historyArr.length(); i++) {\n                    JSONObject obj = historyArr.getJSONObject(i);\n                    Double weight = obj.getDouble(Hs2sProfile.DATA_WEIGHT);\n                    String dataId = obj.getString(Hs2sProfile.DATA_ID);\n                    JSONArray impedanceArray = obj.getJSONArray(Hs2sProfile.DATA_IMPEDANCE);\n                    for (int i = 0; i < impedanceArray.length(); i++) {\n                        int impedance = impedanceArray.getInt(Hs2sProfile.DATA_IMPEDANCE);\n\n                    }\n                    int userCount = obj.getString(Hs2sProfile.DATA_USER_NUM);\n                    int gender = obj.getString(Hs2sProfile.DATA_GENDER);\n                    int age = obj.getString(Hs2sProfile.DATA_AGE);\n                    int height = obj.getString(Hs2sProfile.DATA_HEIGHT);\n                    long measureTs = obj.getLong(Hs2sProfile.DATA_MEASURE_TIME);\n                    int correctTime = obj.getInt(Hs2sProfile.DATA_RIGHT_TIME);\n                    int bodyBuilding = obj.getInt(Hs2sProfile.DATA_BODYBUILDING);\n                    int type = obj.getInt(Hs2sProfile.DATA_INSTRUCTION_TYPE);\n                    int impedanceErrorType = obj.getInt(Hs2sProfile.DATA_IMPEDANCE_ERRORS);\n                    \n                    if(type == 1){\n                        int bodyFit = obj.getString(Hs2sProfile.DATA_BODY_FIT_PERCENTAGE);\n                        int muscleMass = obj.getString(Hs2sProfile.DATA_MUSCLE_MASS);\n                        int boneSaltContent = obj.getString(Hs2sProfile.DATA_BONE_SALT_CONTENT);\n                        int bodyWater = obj.getString(Hs2sProfile.DATA_BODY_WATER_RATE);\n                        int protein = obj.getString(Hs2sProfile.DATA_PROTEIN_RATE);\n                        int footEncryptionImpedance = obj.getString(Hs2sProfile.DATA_IMPEDANCE_ENCRYPT);\n                    }\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"delete-offline-data"},"Delete offline data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.deleteOfflineData(String id);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_DELETE_HISTORY_DATA.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS)\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE)\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n")),(0,a.kt)("h3",{id:"start-heart-rate-measurement-mode"},"Start heart rate measurement mode"),(0,a.kt)("p",null,"If you call this function, Hs2s pro will switch to heart rate measurement mode and the weight measurement is not availabe.\nIf you want to start the weight measurement, need to call the stopHeartRateMode function or disconnect the Hs2s Pro BLE's connection with Phone."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.startHeartRateMode();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_START_HEARTRATE_MEASURE.equals(action)) {\n            Log.i("", "Heart rate measurement is started");\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n\n        } else if (Hs2sProfile.ACTION_HEARTRATE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                int heartrate = obj.getInt(Hs2sProfile.DATA_HEARTRATE);\n                Log.i("", "The heartrate is " + heartrate);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n')),(0,a.kt)("h3",{id:"stop-heart-rate-measurement-mode"},"Stop heart rate measurement mode"),(0,a.kt)("p",null,"If you call this function, Hs2s Pro will stop heart rate measurement mode and back to the weight measurement mode."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"Hs2sProControl control = iHealthDevicesManager.getInstance().getHs2sProControl(mDeviceMac);\ncontrol.stopHeartRateMode();\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Hs2sProfile.ACTION_STOP_HEARTRATE_MEASURE.equals(action)) {\n            Log.i("", "Heart rate measurement is stop");\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Hs2sProfile.OPERATION_STATUS);\n                String description = obj.getString(Hs2sProfile.OPERATION_DESCRIBE);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);