"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5675],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),v=s(n),m=i,g=v["".concat(c,".").concat(m)]||v[m]||d[m]||o;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=v;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:i,r[1]=l;for(var s=2;s<o;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},4744:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var a=n(7462),i=(n(7294),n(3905));const o={title:"KD723",sidebar_position:7},r=void 0,l={unversionedId:"android/blood_pressure/kd723",id:"android/blood_pressure/kd723",title:"KD723",description:"WorkFlow",source:"@site/docs/android/blood_pressure/kd723.mdx",sourceDirName:"android/blood_pressure",slug:"/android/blood_pressure/kd723",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kd723",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_pressure/kd723.mdx",tags:[],version:"current",sidebarPosition:7,frontMatter:{title:"KD723",sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"KN550",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kn550"},next:{title:"KN926",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_pressure/kd926"}},c={},s=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for KD723 devices",id:"2scan-for-kd723-devices",level:3},{value:"3.Connect to KD723 devices",id:"3connect-to-kd723-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Get the device battery",id:"get-the-device-battery",level:3},{value:"Set local time to KD723",id:"set-local-time-to-kd723",level:3},{value:"Get the feature of Continua KD723",id:"get-the-feature-of-continua-kd723",level:3},{value:"Get device function info",id:"get-device-function-info",level:3},{value:"Set Current user",id:"set-current-user",level:3},{value:"Get history data",id:"get-history-data",level:3},{value:"Get memory count",id:"get-memory-count",level:3},{value:"Get memory data",id:"get-memory-data",level:3},{value:"Delete memory data",id:"delete-memory-data",level:3},{value:"Disconnect KD723 device",id:"disconnect-kd723-device",level:3}],p={toc:s};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"workflow"},"WorkFlow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect KD723 blood pressure monitor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"KD723 only support offline measurement."))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_KD723);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-kd723-devices"},"2.Scan for KD723 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.KD723);\n")),(0,i.kt)("h3",{id:"3connect-to-kd723-devices"},"3.Connect to KD723 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().connectDevice(mac, iHealthDevicesManager.TYPE_KD723)\n\nBp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\n")),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-the-device-battery"},"Get the device battery"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version < 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.getBattery();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_BATTERY_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(BpProfile.BATTERY_CBP);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-local-time-to-kd723"},"Set local time to KD723"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version < 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.setTime();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_SET_TIME_CBP.equals(action)) {\n            \n        }\n    } \n}\n")),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version >= 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\n/**\n * @param is24Hour true 24h false 12h\n */\ncontrol.setTime(boolean is24Hour);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_SET_TIME.equals(action)) {\n            \n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-the-feature-of-continua-kd723"},"Get the feature of Continua KD723"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version < 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.getFeature();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_FEATURE_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int bodyMovement   = obj.getInt(BpProfile.FEATURE_BODY_MOVEMENT_CBP);\n                int fitDetection   = obj.getInt(BpProfile.FEATURE_FIT_DETECTION_CBP);\n                int irregularPulse = obj.getInt(BpProfile.FEATURE_IRREGULAR_PULSE_DETECTION_CBP);\n                int pulseRate      = obj.getInt(BpProfile.FEATURE_PULSE_RATE_RANGE_DETECTION_CBP);\n                int measurementPosition = obj.getInt(BpProfile.FEATURE_MEASUREMENT_POSITION_DETECTION_CBP);\n                int multipleBond   = obj.getInt(BpProfile.FEATURE_MULTIPLE_BOND_CBP);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-device-function-info"},"Get device function info"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version >= 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.getFunctionInfo();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_FUNCTION_INFORMATION_BP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int lastOperatingState   = obj.getInt(BpProfile.LAST_OPERATING_STATE);\n                boolean upAirMeasureFlg  = obj.getBoolean(BpProfile.FUNCTION_IS_UPAIR_MEASURE);\n                boolean armMeasureFlg  = obj.getBoolean(BpProfile.FUNCTION_IS_ARM_MEASURE);\n                boolean haveAngleSensor  = obj.getBoolean(BpProfile.FUNCTION_HAVE_ANGLE_SENSOR);\n                boolean haveRepeatedlyMeasure  = obj.getBoolean(BpProfile.HAVE_REPEATEDLY_MEASURE);\n                boolean haveOffline  = obj.getBoolean(BpProfile.FUNCTION_HAVE_OFFLINE);\n                boolean haveHSD  = obj.getBoolean(BpProfile.FUNCTION_HAVE_HSD);\n                int memoryGroup = obj.getInt(BpProfile.MEMORY_GROUP);\n                int maxMemoryCapacity = obj.getInt(BpProfile.MAX_MEMORY_CAPACITY);\n                boolean haveShowUnitSetting = obj.getBoolean(BpProfile.HAVE_SHOW_UNIT_SETTING);\n                int showUnit = obj.getInt(BpProfile.SHOW_UNIT);\n                boolean haveAngleSet = obj.getBoolean(BpProfile.FUNCTION_HAVE_ANGLE_SETTING);\n                boolean multiUploadFlg = obj.getBoolean(BpProfile.FUNCTION_IS_MULTI_UPLOAD);\n                boolean selfUpdateFlg = obj.getBoolean(BpProfile.FUNCTION_HAVE_SELF_UPDATE);\n                boolean haveBackLightSetting = obj.getBoolean(BpProfile.HAVE_BACKLIGHT_SETTING);\n                boolean haveClockShowSetting = obj.getBoolean(BpProfile.HAVE_CLOCK_SHOW_SETTING);\n                String deviceTime = obj.getString(BpProfile.DEVICE_TIME);\n                String is24Hour = obj.getString(BpProfile.IS_24_HOUR);\n                String strProtocol = obj.getString(BpProfile.PROTOCOL);\n                String strAccessoryName = obj.getString(BpProfile.ACCESSORY_NAME);\n                String strFwVer = obj.getString(BpProfile.FIRMWARE_VERSION);\n                String strHwVer = obj.getString(BpProfile.HARDWARE_VERSION);\n                String strManufacture = obj.getString(BpProfile.MANUFACTURER);\n                String strModeNumber = obj.getString(BpProfile.MODEL_NUMBER);\n                String strSerialnumber = obj.getString(BpProfile.SERIAL_NUMBER);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-current-user"},"Set Current user"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version < 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.commandSetUser(int UserID);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_CONFORM_CHOOSE_USER_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int currentUserId = obj.getInt(BpProfile.CHOOSE_USER_CBP);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-history-data"},"Get history data"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version < 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.getData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_HISTORY_DATA_CBP.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int measureFlag = obj.getInt(BpProfile.CBPINFO_UNIT);\n                int timestampFlag = obj.getInt(BpProfile.CBPINFO_TIMESTAMP_FLAG);            \n                int pulseRateFlag = obj.getInt(BpProfile.CBPINFO_PULSE_RATE_FLAG);\n                int userIDFlag = obj.getInt(BpProfile.CBPINFO_USER_ID_FLAG);\n                int measureStatusFlag = obj.getInt(BpProfile.CBPINFO_MEASURE_STATUS_FLAG);\n                int hsdFlag = obj.getInt(BpProfile.CBPINFO_HSD_FLAG);\n                int sys = obj.getInt(BpProfile.CBPINFO_SYS);\n                int dia = obj.getInt(BpProfile.CBPINFO_DIA);\n                int map = obj.getInt(BpProfile.CBPINFO_MAP);\n                int measureTime = obj.getInt(BpProfile.CBPINFO_TIMESTAMP);\n                int pulseRate = obj.getInt(BpProfile.CBPINFO_PULSE_RATE);\n              \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-memory-count"},"Get memory count"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version >= 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.getMemoryCount();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_GET_MEMORY_COUNT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int memoryCount = obj.getInt(BpProfile.MEMORY_COUNT);\n              \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-memory-data"},"Get memory data"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version >= 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.getMemoryData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_GET_MEMORY_DATA.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                JSONArray memoryArray = obj.getJSONArray(BpProfile.MEMORY_DATA);\n                for (int i =0; i< array.length();i++){\n                    JSONObject memoryObj = memoryArray.getJSONObject(i);\n                    String time = memoryObj.getString(BpProfile.MEASUREMENT_DATE_BP);\n                    int sys = memoryObj.getString(BpProfile.HIGH_BLOOD_PRESSURE_BP);\n                    int dia = memoryObj.getString(BpProfile.LOW_BLOOD_PRESSURE_BP);\n                    int heartRate = memoryObj.getString(BpProfile.PULSE_BP);\n                    int ID = memoryObj.getString(BpProfile.SCHEME_ID);\n                    boolean irregular = memoryObj.getBoolean(BpProfile.IRREGULAR);\n                    boolean bodyMovement = memoryObj.getBoolean(BpProfile.BODY_MOVEMENT);\n                    boolean timeCalibration = memoryObj.getBoolean(BpProfile.IS_RIGHT_TIME);\n                    String dataID = memoryObj.getString(BpProfile.DATAID);\n                }\n              \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"delete-memory-data"},"Delete memory data"),(0,i.kt)("div",{className:"admonition admonition-info alert alert--info"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"},"Only supported by device firmware version >= 1.1.0"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.deleteMemoryData();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (BpProfile.ACTION_DELETE_MEMORY_DATA.equals(action)) {\n            Log.i("", "Delete memory data success!");\n        }\n    } \n}\n')),(0,i.kt)("h3",{id:"disconnect-kd723-device"},"Disconnect KD723 device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bp723Control control = iHealthDevicesManager.getInstance().getBp723Control(mDeviceMac);\ncontrol.disconnect();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData) { \n        if (iHealthDevicesManager.DEVICE_STATE_DISCONNECTED == status) {\n            Log.i("The device is disconnected");\n        }\n    }\n}\n')))}d.isMDXComponent=!0}}]);