"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[3364],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var i=r.createContext({}),s=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),p=a,v=m["".concat(i,".").concat(p)]||m[p]||u[p]||o;return n?r.createElement(v,c(c({ref:t},d),{},{components:n})):r.createElement(v,c({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:a,c[1]=l;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5945:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"ECG3",sidebar_position:1},c=void 0,l={unversionedId:"react-native/ecg/ecg",id:"react-native/ecg/ecg",title:"ECG3",description:"API Reference",source:"@site/docs/react-native/ecg/ecg.md",sourceDirName:"react-native/ecg",slug:"/react-native/ecg/",permalink:"/ihealthlabs-sdk-docs/docs/react-native/ecg/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/react-native/ecg/ecg.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"ECG3",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"AM6",permalink:"/ihealthlabs-sdk-docs/docs/react-native/tracker/am6"},next:{title:"ECG3USB",permalink:"/ihealthlabs-sdk-docs/docs/react-native/ecg/ecgusb"}},i={},s=[{value:"API Reference",id:"api-reference",level:2},{value:"Import ECG3 module",id:"import-ecg3-module",level:2},{value:"Add and remove listener",id:"add-and-remove-listener",level:3},{value:"get all connected devices",id:"get-all-connected-devices",level:3},{value:"start a measurement",id:"start-a-measurement",level:3},{value:"cancel a measurement",id:"cancel-a-measurement",level:3},{value:"get battery",id:"get-battery",level:3},{value:"set current time to device",id:"set-current-time-to-device",level:3}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"api-reference"},"API Reference"),(0,a.kt)("h2",{id:"import-ecg3-module"},"Import ECG3 module"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  ECGModule,\n  ECGProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,a.kt)("h3",{id:"add-and-remove-listener"},"Add and remove listener"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(ECGModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,a.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.getAllConnectedDevices();\n")),(0,a.kt)("h3",{id:"start-a-measurement"},"start a measurement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.startMeasure(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(ECGModule.Event_Notify,  (event) => {\n    if (event.action === ECGModule.ACTION_ELECTRODE_STATUS) {\n        console.log(event[ECGProfileModule.ELECTRODE_STATUS]);\n        console.log(event[ECGProfileModule.ERROR_DESCRIPTION_ECG]);\n    }\n});\n")),(0,a.kt)("h3",{id:"cancel-a-measurement"},"cancel a measurement"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.stopMeasure(mac);\n")),(0,a.kt)("h3",{id:"get-battery"},"get battery"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.getBattery(mac);\n\n// response\nnotifyListener = DeviceEventEmitter.addListener(ECGModule.Event_Notify,  (event) => {\n    if (event.action === ECGModule.ACTION_BATTERY_ECG) {\n        console.log(event[ECGProfileModule.BATTERY_ECG])\n    }\n});\n")),(0,a.kt)("h3",{id:"set-current-time-to-device"},"set current time to device"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},"ECGModule.sysTime(mac);\n")))}u.isMDXComponent=!0}}]);