"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[5382],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>p});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),m=s(n),p=a,f=m["".concat(l,".").concat(p)]||m[p]||u[p]||o;return n?r.createElement(f,c(c({ref:t},d),{},{components:n})):r.createElement(f,c({ref:t},d))}));function p(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var s=2;s<o;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},74:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"ECG3USB",sidebar_position:2},c=void 0,i={unversionedId:"ios/ecg/ecgusb",id:"ios/ecg/ecgusb",title:"ECG3USB",description:"WorkFlow",source:"@site/docs/ios/ecg/ecgusb.md",sourceDirName:"ios/ecg",slug:"/ios/ecg/ecgusb",permalink:"/ihealthlabs-sdk-docs/docs/ios/ecg/ecgusb",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/ios/ecg/ecgusb.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"ECG3USB",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"ECG3",permalink:"/ihealthlabs-sdk-docs/docs/ios/ecg/"},next:{title:"Get started",permalink:"/ihealthlabs-sdk-docs/docs/react-native/quickstart"}},l={},s=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for ECG3USB devices",id:"2scan-for-ecg3usb-devices",level:3},{value:"3.Connect to ECG3USB devices",id:"3connect-to-ecg3usb-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Sync Data",id:"sync-data",level:3},{value:"Format SD Card",id:"format-sd-card",level:3},{value:"Splice data",id:"splice-data",level:3},{value:"Get data cache",id:"get-data-cache",level:3},{value:"Filter",id:"filter",level:3}],d={toc:s};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"workflow"},"WorkFlow"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Scan and connect ECG3USB .")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"ECG3USB is a wired connection to the device via USB and synchronizes the data in the device"))),(0,a.kt)("p",null,"If you use these devices, please contact us before submitting the Apple Store. We will generate a ppid based on the information you provided to help your app pass the review."),(0,a.kt)("p",null,"If you're using ECG3USB, you need to add protocol:protocol:com.jiuan.ECGV10"),(0,a.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,a.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceConnect:) name:ECGUSBConnectNoti object:nil];\n\n[[NSNotificationCenter defaultCenter]addObserver:self selector:@selector(DeviceDisConnect:) name:ECGUSBDisConnectNoti object:nil];\n            \n[ECG3USBController shareECG3USBController];\n\n")),(0,a.kt)("h3",{id:"2scan-for-ecg3usb-devices"},"2.Scan for ECG3USB devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"ECG3USB is a wired connection between USB and device without calling the scan connection method, only need to monitor the notification of connection success and failure\n")),(0,a.kt)("h3",{id:"3connect-to-ecg3usb-devices"},"3.Connect to ECG3USB devices"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"ECG3USB is a wired connection between USB and device without calling the scan connection method, only need to monitor the notification of connection success and failure\n")),(0,a.kt)("h2",{id:"api-reference"},"API reference"),(0,a.kt)("h3",{id:"sync-data"},"Sync Data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n Sync Data\n\n @param startBlock means start\n @param progressBlock 0-100\n @param resultBlock You can get filtered data from the NSDocumentDirectory path.\n \n Abnormal Point Marked by User: OBData_FileName.xml\n Filtered ECG Data: ECGAnalyseResult_FileName.dat\n Lead Off Begin Point: ECGLeadOffBegin_FileName.xml\n Lead Off End Point: ECGLeadOffEnd_FileName.xml\n ECG HR Information EveryHour: ECGHREveryHour_FileName.xml\n Abnormal Point Filtered by Algorithm: ECGOBbyFilter_FileName.xml\n ECG HR Information for Day: ECGDetail_FileName.xml\n @param errorBlock error\n \n */\n- (void)syncDataWithStartBlock:(ECG3USBSyncStartBlock)startBlock\n                 progressBlock:(ECG3USBSyncProgressBlock)progressBlock\n                   resultBlock:(ECG3USBSyncResultBlock)resultBlock\n                    errorBlock:(ECG3USBErrorBlock)errorBlock;\n")),(0,a.kt)("h3",{id:"format-sd-card"},"Format SD Card"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n/**\n Format SD Card\n\n @param successBlock Success\n @param progressBlock 0-100\n @param failBlock Fail\n */\n-(void)formatSDCard:(ECG3FormatSDCardSuccessBlock)successBlock\n      progressBlock:(ECG3USBFormatProgressBlock)progressBlock\n         errorBlock:(ECG3FormatSDCardFailBlock)failBlock;\n")),(0,a.kt)("h3",{id:"splice-data"},"Splice data"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'/**\n Splice data\n \n @param fileNames An Array with FileName value from ECG3USBSyncResultBlock\n @param successBlock a block contains a dictionary with keys: success(@{@"DataFileName":dataFileName,@"MarkFileName":markFileName,@"StartTime":yyyyMMddHHmmss,@"EndTime":yyyyMMddHHmmss,@"FilePath":directory});\n @param errorBlock a block contains error message\n */\n+ (void)spliceWithFileNames:(NSArray<NSString *>*)fileNames\n               successBlock:(void(^)(NSDictionary *dic))successBlock\n                 errorBlock:(void(^)(ECG3USBError error,NSString *message))errorBlock;\n')),(0,a.kt)("h3",{id:"get-data-cache"},"Get data cache"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},'/**\n Get data cache\n\n @param block An array contains Dictionary object\n {\n @"SampleRate":@(sampleRate),\n @"StartTime":startTimeString,\n @"EndTime":endTimeString,\n @"FileName":fileName,\n @"FilePath":path\n });\n */\n- (void)getCacheDataWithBlock:(void(^)(NSArray *array))block;\n')),(0,a.kt)("h3",{id:"filter"},"Filter"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-java"},"/**\n \n\n @param dic the dictionary from the success block of method \u2019synthesisWithFileNames:success:error:\u2018\n */\n\n/**\n Filter\n\n @param dic the dictionary from the success block of method \u2019synthesisWithFileNames:success:error:\u2018\n @param success see ECG3USBSyncResultBlock comments\n @param error a block contains error message (If the files don't exist, no error block retrun but print error message in the console)\n */\n- (void)getFilterDataWithDic:(NSDictionary *)dic success:(ECG3USBSyncResultBlock)success error:(void(^)(NSString *message))error;\n")))}u.isMDXComponent=!0}}]);