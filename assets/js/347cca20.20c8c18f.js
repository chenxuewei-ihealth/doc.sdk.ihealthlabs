"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[2760],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>u});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},v=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),v=s(n),u=r,g=v["".concat(l,".").concat(u)]||v[u]||p[u]||o;return n?a.createElement(g,i(i({ref:t},d),{},{components:n})):a.createElement(g,i({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=v;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}v.displayName="MDXCreateElement"},5266:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const o={title:"PO3",sidebar_position:2},i=void 0,c={unversionedId:"android/blood_oxygen/po3",id:"android/blood_oxygen/po3",title:"PO3",description:"WorkFlow",source:"@site/docs/android/blood_oxygen/po3.md",sourceDirName:"android/blood_oxygen",slug:"/android/blood_oxygen/po3",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_oxygen/po3",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_oxygen/po3.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"PO3",sidebar_position:2},sidebar:"tutorialSidebar",previous:{title:"PO1",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_oxygen/po1"},next:{title:"NT13B",permalink:"/ihealthlabs-sdk-docs/docs/android/thermometer/nt13b"}},l={},s=[{value:"WorkFlow",id:"workflow",level:2},{value:"Connection to device",id:"connection-to-device",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for PO3 devices",id:"2scan-for-po3-devices",level:3},{value:"3.Connect to PO3 devices",id:"3connect-to-po3-devices",level:3},{value:"API reference",id:"api-reference",level:2},{value:"Get the PO3 battery status",id:"get-the-po3-battery-status",level:3},{value:"Start a measurement",id:"start-a-measurement",level:3},{value:"Get offline data",id:"get-offline-data",level:3},{value:"Disconnect the PO3",id:"disconnect-the-po3",level:3}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"workflow"},"WorkFlow"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"Scan and connect PO3 scale.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},"PO3 support online measurement and offline measurement."))),(0,r.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,r.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_PO3);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,r.kt)("h3",{id:"2scan-for-po3-devices"},"2.Scan for PO3 devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.PO3);\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Return\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { \n        Log.i(TAG, "onScanDevice - mac:" + mac + " - deviceType:" + deviceType + " - rssi:" + rssi + " - manufactorData:" + manufactorData);\n    }\n}\n')),(0,r.kt)("h3",{id:"3connect-to-po3-devices"},"3.Connect to PO3 devices"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_PO3)\nPo3Control control = iHealthDevicesManager.getInstance().getPo3Control(mDeviceMac);\n')),(0,r.kt)("h2",{id:"api-reference"},"API reference"),(0,r.kt)("h3",{id:"get-the-po3-battery-status"},"Get the PO3 battery status"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Po3Control control = iHealthDevicesManager.getInstance().getPo3Control(mDeviceMac);\ncontrol.getBattery();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (PoProfile.ACTION_BATTERY_PO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery = obj.getInt(PoProfile.BATTERY_PO);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"start-a-measurement"},"Start a measurement"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Po3Control control = iHealthDevicesManager.getInstance().getPo3Control(mDeviceMac);\ncontrol.startMeasure();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (PoProfile.ACTION_LIVEDA_PO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n\n                int bloodOxygen = obj.getInt(PoProfile.BLOOD_OXYGEN_PO);\n                int pulseRate = obj.getInt(PoProfile.PULSE_RATE_PO);\n                int pulseStrength = obj.getInt(PoProfile.PULSE_STRENGTH_PO);\n                int pi = obj.getInt(PoProfile.PI_PO);\n                JSONArray pulseWave = obj.getJSONArray(PoProfile.PULSE_WAVE_PO);\n            \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (PoProfile.ACTION_RESULTDATA_PO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n\n                int bloodOxygen = obj.getInt(PoProfile.BLOOD_OXYGEN_PO);\n                int pulseRate = obj.getInt(PoProfile.PULSE_RATE_PO);\n                int pulseStrength = obj.getInt(PoProfile.PULSE_STRENGTH_PO);\n                int pi = obj.getInt(PoProfile.PI_PO);\n                JSONArray pulseWave = obj.getJSONArray(PoProfile.PULSE_WAVE_PO);\n            \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,r.kt)("h3",{id:"get-offline-data"},"Get offline data"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Po3Control control = iHealthDevicesManager.getInstance().getPo3Control(mDeviceMac);\ncontrol.getHistoryData();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (PoProfile.ACTION_NO_OFFLINEDATA_PO.equals(action)) {\n            Log.i("", "No offline data");\n\n        } else if (PoProfile.ACTION_OFFLINEDATA_PO.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                JSONArray arr = obj.getJSONArray();\n                for (JSONObject obj : arr) {\n                    int measureDate = obj.getInt(PoProfile.MEASURE_DATE_PO);\n                    int bloodOxygen = obj.getInt(PoProfile.BLOOD_OXYGEN_PO);\n                    int pulseRate = obj.getInt(PoProfile.PULSE_RATE_PO);\n                    JSONArray pulseWave = obj.getJSONArray(PoProfile.PULSE_WAVE_PO);\n                }\n            \n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n')),(0,r.kt)("h3",{id:"disconnect-the-po3"},"Disconnect the PO3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"Po3Control control = iHealthDevicesManager.getInstance().getPo3Control(mDeviceMac);\ncontrol.disconnect();\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n     @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData) { \n        if (iHealthDevicesManager.DEVICE_STATE_DISCONNECTED == status) {\n            Log.i("The device is disconnected");\n        }\n    }\n}\n')))}p.isMDXComponent=!0}}]);