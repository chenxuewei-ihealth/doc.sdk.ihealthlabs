"use strict";(self.webpackChunkdoc_sdk=self.webpackChunkdoc_sdk||[]).push([[8155],{3905:function(e,n,t){t.d(n,{Zo:function(){return d},kt:function(){return f}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},v=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),v=s(t),f=r,m=v["".concat(c,".").concat(f)]||v[f]||u[f]||i;return t?a.createElement(m,o(o({ref:n},d),{},{components:t})):a.createElement(m,o({ref:n},d))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=v;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}v.displayName="MDXCreateElement"},8215:function(e,n,t){var a=t(7294);n.Z=function(e){var n=e.children,t=e.hidden,r=e.className;return a.createElement("div",{role:"tabpanel",hidden:t,className:r},n)}},5064:function(e,n,t){t.d(n,{Z:function(){return s}});var a=t(7294),r=t(9443);var i=function(){var e=(0,a.useContext)(r.Z);if(null==e)throw new Error('"useUserPreferencesContext" is used outside of "Layout" component.');return e},o=t(6010),l="tabItem_1uMI",c="tabItemActive_2DSg";var s=function(e){var n,t=e.lazy,r=e.block,s=e.defaultValue,d=e.values,u=e.groupId,v=e.className,f=a.Children.toArray(e.children),m=null!=d?d:f.map((function(e){return{value:e.props.value,label:e.props.label}})),p=null!=s?s:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value,g=i(),S=g.tabGroupChoices,h=g.setTabGroupChoices,H=(0,a.useState)(p),b=H[0],k=H[1],y=[];if(null!=u){var D=S[u];null!=D&&D!==b&&m.some((function(e){return e.value===D}))&&k(D)}var N=function(e){var n=e.currentTarget,t=y.indexOf(n),a=m[t].value;k(a),null!=u&&(h(u,a),setTimeout((function(){var e,t,a,r,i,o,l,s;(e=n.getBoundingClientRect(),t=e.top,a=e.left,r=e.bottom,i=e.right,o=window,l=o.innerHeight,s=o.innerWidth,t>=0&&i<=s&&r<=l&&a>=0)||(n.scrollIntoView({block:"center",behavior:"smooth"}),n.classList.add(c),setTimeout((function(){return n.classList.remove(c)}),2e3))}),150))},O=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=y.indexOf(e.target)+1;t=y[a]||y[0];break;case"ArrowLeft":var r=y.indexOf(e.target)-1;t=y[r]||y[y.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":r},v)},m.map((function(e){var n=e.value,t=e.label;return a.createElement("li",{role:"tab",tabIndex:b===n?0:-1,"aria-selected":b===n,className:(0,o.Z)("tabs__item",l,{"tabs__item--active":b===n}),key:n,ref:function(e){return y.push(e)},onKeyDown:O,onFocus:N,onClick:N},null!=t?t:n)}))),t?(0,a.cloneElement)(f.filter((function(e){return e.props.value===b}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==b})}))))}},9443:function(e,n,t){var a=(0,t(7294).createContext)(void 0);n.Z=a},9530:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return d},metadata:function(){return u},toc:function(){return v},default:function(){return m}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=t(5064),l=t(8215),c=["components"],s={title:"HS4",sidebar_position:3},d=void 0,u={unversionedId:"device/scale/hs4",id:"device/scale/hs4",isDocsHomePage:!1,title:"HS4",description:"WorkFlow",source:"@site/docs/device/scale/hs4.md",sourceDirName:"device/scale",slug:"/device/scale/hs4",permalink:"/doc.sdk.ihealthlabs/docs/device/scale/hs4",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/device/scale/hs4.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"HS4",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"HS2S",permalink:"/doc.sdk.ihealthlabs/docs/device/scale/hs2s"},next:{title:"HS4S",permalink:"/doc.sdk.ihealthlabs/docs/device/scale/hs4s"}},v=[{value:"WorkFlow",id:"workflow",children:[]},{value:"Connection to device",id:"connection-to-device",children:[{value:"1.Listen to device notify",id:"1listen-to-device-notify",children:[]},{value:"2.Scan for HS4 devices",id:"2scan-for-hs4-devices",children:[]},{value:"3.Connect to HS4 devices",id:"3connect-to-hs4-devices",children:[]}]},{value:"API reference",id:"api-reference",children:[{value:"Get offline data",id:"get-offline-data",children:[]},{value:"Start a online measurement",id:"start-a-online-measurement",children:[]},{value:"Disconnect the HS4",id:"disconnect-the-hs4",children:[]}]},{value:"APIs",id:"apis",children:[{value:"add and remove listener",id:"add-and-remove-listener",children:[]},{value:"start a measurement",id:"start-a-measurement",children:[]},{value:"get data stored in the HS4S device",id:"get-data-stored-in-the-hs4s-device",children:[]},{value:"disconnect device",id:"disconnect-device",children:[]},{value:"get all connected devices",id:"get-all-connected-devices",children:[]}]}],f={toc:v};function m(e){var n=e.components,t=(0,r.Z)(e,c);return(0,i.kt)("wrapper",(0,a.Z)({},f,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(o.Z,{mdxType:"Tabs"},(0,i.kt)(l.Z,{value:"android",label:"Android",default:!0,mdxType:"TabItem"},(0,i.kt)("h2",{id:"workflow"},"WorkFlow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect HS4 scale.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"HS4 support online measurement and offline measurement."))),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_HS4);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-hs4-devices"},"2.Scan for HS4 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.HS4);\n")),(0,i.kt)("h3",{id:"3connect-to-hs4-devices"},"3.Connect to HS4 devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_HS4)\nHs4Control control = iHealthDevicesManager.getInstance().getHs4Control(mDeviceMac);\n')),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-offline-data"},"Get offline data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Hs4Control control = iHealthDevicesManager.getInstance().getHs4Control(mDeviceMac);\ncontrol.getOfflineData() \n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (HsProfile.ACTION_HISTORICAL_DATA_COMPLETE_HS.equals(action)) {\n            try {\n                JSONArray historyArr = new JSONArray(message);\n                for (int i = 0; i < historyArr.length(); i++) {\n                    JSONObject obj = historyArr.getJSONObject(i);\n                    String measureTs = obj.getString(HsProfile.MEASUREMENT_DATE_HS);\n                    String weight    = obj.getString(HsProfile.WEIGHT_HS);\n                 \n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"start-a-online-measurement"},"Start a online measurement"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Hs2Control control = iHealthDevicesManager.getInstance().getHs2Control(mDeviceMac);\n/*\n * @param unit 1 kg; 2 lb; 3 st\n * @param userId user identify number\n */\ncontrol.measureOnline(int unit, int userId)\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (HsProfile.ACTION_LIVEDATA_HS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String weight = obj.getString(HsProfile.DATA_LIVEDATA_HSWEIGHT);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (HsProfile.ACTION_ONLINE_RESULT_HS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                String weight = obj.getString(HsProfile.WEIGHT_HS);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } \n    }\n}\n")),(0,i.kt)("h3",{id:"disconnect-the-hs4"},"Disconnect the HS4"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Hs4Control control = iHealthDevicesManager.getInstance().getHs4Control(mDeviceMac);\ncontrol.disconnect();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n     @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData) { \n        \n    }\n}\n"))),(0,i.kt)(l.Z,{value:"ios",label:"iOS",mdxType:"TabItem"},(0,i.kt)("h4",{id:"ios-doc"},"iOS Doc")),(0,i.kt)(l.Z,{value:"reactnative",label:"React Native",mdxType:"TabItem"},"## import HS4S module",(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import {\n  HS4SModule,\n  HSProfileModule\n} from '@ihealth/ihealthlibrary-react-native';\n")),(0,i.kt)("h2",{id:"apis"},"APIs"),(0,i.kt)("h3",{id:"add-and-remove-listener"},"add and remove listener"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"// add\nnotifyListener = DeviceEventEmitter.addListener(HS4SModule.Event_Notify,  (event) => {\n    console.log(event);\n});\n\n// remove\nnotifyListener.remove();\n")),(0,i.kt)("h3",{id:"start-a-measurement"},"start a measurement"),(0,i.kt)("p",null,"The API is asyn function. It will return message until finish measurement."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"HS4SModule.startMeasure(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS4SModule.Event_Notify,  (event) => {\n    if (event.action === HSProfileModule.ACTION_ONLINE_RESULT_HS) {\n        console.log(event[HSProfileModule.DATAID]);\n        console.log(event[HSProfileModule.WEIGHT_HS]);\n        console.log(event[HSProfileModule.FAT_HS]);\n        console.log(event[HSProfileModule.WATER_HS]);\n        console.log(event[HSProfileModule.MUSCLE_HS]);\n        console.log(event[HSProfileModule.SKELETON_HS]);\n        console.log(event[HSProfileModule.FATELEVEL_HS]);\n        console.log(event[HSProfileModule.DCI_HS]);\n    }\n});\n")),(0,i.kt)("h3",{id:"get-data-stored-in-the-hs4s-device"},"get data stored in the HS4S device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'HS4SModule.getOfflineData(mac);\n\nnotifyListener = DeviceEventEmitter.addListener(HS4SModule.Event_Notify,  (event) => {\n    if (event.action === HSProfileModule.ACTION_HISTORICAL_DATA_HS) {\n        let dataArray = event[HSProfileModule.HISTORDATA_HS];\n        if (dataArray == undefined) {\n            result = "There is not offline data in device"\n        }else {\n            for (let i = 0; i < dataArray.length; i++) {\n                let offlineData = dataArray[i];\n                console.log(offlineData[HSProfileModule.MEASUREMENT_DATE_HS]);\n                console.log(offlineData[HSProfileModule.WEIGHT_HS]);\n                console.log(offlineData[HSProfileModule.FAT_HS]);\n                console.log(offlineData[HSProfileModule.WATER_HS]);\n                console.log(offlineData[HSProfileModule.MUSCLE_HS]);\n                console.log(offlineData[HSProfileModule.SKELETON_HS]);\n                console.log(offlineData[HSProfileModule.FATELEVEL_HS]);\n                console.log(offlineData[HSProfileModule.DATAID]);\n            }\n        }\n    }\n});\n')),(0,i.kt)("h3",{id:"disconnect-device"},"disconnect device"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"BP3LModule.disConnect(mac);\n")),(0,i.kt)("h3",{id:"get-all-connected-devices"},"get all connected devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"BP3LModule.getAllConnectedDevices();\n")))))}m.isMDXComponent=!0},6010:function(e,n,t){function a(e){var n,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(n=0;n<e.length;n++)e[n]&&(t=a(e[n]))&&(r&&(r+=" "),r+=t);else for(n in e)e[n]&&(r&&(r+=" "),r+=n);return r}function r(){for(var e,n,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(n=a(e))&&(r&&(r+=" "),r+=n);return r}t.d(n,{Z:function(){return r}})}}]);