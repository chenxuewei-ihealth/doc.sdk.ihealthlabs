"use strict";(self.webpackChunkdocusaurus=self.webpackChunkdocusaurus||[]).push([[7490],{3905:function(e,n,t){t.d(n,{Zo:function(){return g},kt:function(){return v}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),s=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},g=function(e){var n=s(e.components);return a.createElement(l.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,g=c(e,["components","mdxType","originalType","parentName"]),u=s(t),v=r,p=u["".concat(l,".").concat(v)]||u[v]||d[v]||i;return t?a.createElement(p,o(o({ref:n},g),{},{components:t})):a.createElement(p,o({ref:n},g))}));function v(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var s=2;s<i;s++)o[s]=t[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7268:function(e,n,t){t.r(n),t.d(n,{assets:function(){return g},contentTitle:function(){return l},default:function(){return v},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var a=t(7462),r=t(3366),i=(t(7294),t(3905)),o=["components"],c={title:"BG1A",sidebar_position:5},l=void 0,s={unversionedId:"android/blood_glucose/bg1a",id:"android/blood_glucose/bg1a",title:"BG1A",description:"Connection workflow",source:"@site/docs/android/blood_glucose/bg1a.md",sourceDirName:"android/blood_glucose",slug:"/android/blood_glucose/bg1a",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg1a",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/android/blood_glucose/bg1a.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{title:"BG1A",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"BG5S",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_glucose/bg5s"},next:{title:"PO1",permalink:"/ihealthlabs-sdk-docs/docs/android/blood_oxygen/po1"}},g={},d=[{value:"Connection workflow",id:"connection-workflow",level:2},{value:"1.Listen to device notify",id:"1listen-to-device-notify",level:3},{value:"2.Scan for BG1A devices",id:"2scan-for-bg1a-devices",level:3},{value:"3.Connect to BG1A devices",id:"3connect-to-bg1a-devices",level:3},{value:"Connection to device",id:"connection-to-device",level:2},{value:"API reference",id:"api-reference",level:2},{value:"Get the BG1A IDPS information.",id:"get-the-bg1a-idps-information",level:3},{value:"Get the BG1A battery level.",id:"get-the-bg1a-battery-level",level:3},{value:"Set the BG1A measurement mode.",id:"set-the-bg1a-measurement-mode",level:3},{value:"Notify the measurement workflow and result.",id:"notify-the-measurement-workflow-and-result",level:3},{value:"Error message",id:"error-message",level:3}],u={toc:d};function v(e){var n=e.components,t=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"connection-workflow"},"Connection workflow"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Scan and connect BG1A blood glucose monitor.")),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"BG1A only support online measurement."))),(0,i.kt)("h3",{id:"1listen-to-device-notify"},"1.Listen to device notify"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"private iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    \n    @Override\n    public void onScanDevice(String mac, String deviceType, int rssi, Map manufactorData) { }\n\n    @Override\n    public void onDeviceConnectionStateChange(String mac, String deviceType, int status, int errorID, Map manufactorData){ }\n\n    @Override\n    public void onScanError(String reason, long latency) { }\n\n    @Override\n    public void onScanFinish() { }\n\n    @Override\n    public void onDeviceNotify(String mac, String deviceType,\n                                String action, String message) { }\n}\nint callbackId = iHealthDevicesManager.getInstance().registerClientCallback(miHealthDevicesCallback);\niHealthDevicesManager.getInstance().addCallbackFilterForDeviceType(callbackId, iHealthDevicesManager.TYPE_BG1A);\niHealthDevicesManager.getInstance().addCallbackFilterForAddress(callbackId, String... macs)\n")),(0,i.kt)("h3",{id:"2scan-for-bg1a-devices"},"2.Scan for BG1A devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"iHealthDevicesManager.getInstance().startDiscovery(DiscoveryTypeEnum.BG1A);\n")),(0,i.kt)("h3",{id:"3connect-to-bg1a-devices"},"3.Connect to BG1A devices"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'iHealthDevicesManager.getInstance().connectDevice("", mac, iHealthDevicesManager.TYPE_BG1A)\n\nBg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\n')),(0,i.kt)("h2",{id:"connection-to-device"},"Connection to device"),(0,i.kt)("h2",{id:"api-reference"},"API reference"),(0,i.kt)("h3",{id:"get-the-bg1a-idps-information"},"Get the BG1A IDPS information."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1sControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\ncontrol.getIDPS();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_INFO_IDPS.equals(action)) {\n            try {\n                JSONObject obj       = new JSONObject(message);\n                String protocol      = obj.getString(iHealthDevicesIDPS.PROTOCOLSTRING);\n                String accessory     = obj.getString(iHealthDevicesIDPS.ACCESSORYNAME);\n                String firmware      = obj.getString(iHealthDevicesIDPS.FIRMWAREVERSION);\n                String hardware      = obj.getString(iHealthDevicesIDPS.HARDWAREVERSION);\n                String manufacturer  = obj.getString(iHealthDevicesIDPS.MANUFACTURER);\n                String mode_number   = obj.getString(iHealthDevicesIDPS.MODENUMBER);\n                String serial_number = obj.getString(iHealthDevicesIDPS.SERIALNUMBER);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"get-the-bg1a-battery-level"},"Get the BG1A battery level."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"Bg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\ncontrol.getBattery();\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_BATTERY_BG1A.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int battery_level = obj.getInt(Bg1aProfile.INFO_BATTERY_BG1A);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"set-the-bg1a-measurement-mode"},"Set the BG1A measurement mode."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n * 0: Blood mode\n * 1: CTL mode, CTL: control solution\n **/\n\nBg1aControl control = iHealthDevicesManager.getInstance().getBg1aControl(mDeviceMac);\ncontrol.setMeasureMode(int mode);\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_SET_MEASURE_MODE.equals(action)) {\n           try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt(Bg1sProfile.OPERATION_STATUS);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        }\n    } \n}\n")),(0,i.kt)("h3",{id:"notify-the-measurement-workflow-and-result"},"Notify the measurement workflow and result."),(0,i.kt)("p",null,"No need to call any API, just listen to this event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'// Return value\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_STRIP_INSERTION_STATUS.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                int status = obj.getInt((Bg1aProfile.STRIP_INSERTION_STATUS);\n                if (1 == status) {\n                    Log.i("test strip in");\n                } else if (2 == status) {\n                    Log.i("test strip out");\n                }\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n\n        } else if (Bg1aProfile.ACTION_GET_BLOOD.equals(action)) {\n            Log.i("test drop blood");\n\n        } else if (Bg1aProfile.ACTION_MEASURE_RESULT.equals(action)) {\n            try {\n                JSONObject obj = new JSONObject(message);\n                /**\n                  * 0: Blood mode\n                  * 1: CTL mode\n                 **/\n                int mode  = obj.getInt(Bg1aProfile.MEASURE_MODE);\n                int value = obj.getInt(Bg1aProfile.MEASURE_RESULT);\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } \n    } \n}\n')),(0,i.kt)("h3",{id:"error-message"},"Error message"),(0,i.kt)("p",null,"No need to call any API, just listen to the error event."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"/**\n  * Error id and error description\n  * 1: The caculation result is zero\n  * 2: Abnormal low current\n  * 3: Algorithm connection error\n  * 4: Blood-sucking timeout\n  * 5: Missing XM1 error\n  * 10: Self-inspection error\n  * 11: Unrecognized test paper type error\n  * 12: Waste test strip\n  * 14: Low power alarm (<2.6V)\n  * 15: High voltage alarm (>4V)\n  * 16: Temperature low out of range\n  * 17: Temperature high out of range\n  * 18: Flash write failed\n  * 20: No calibration inspection mark\n  * 21: No calibration recheck inspection mark\n  * 21: No test paper socket inspection mark\n  * 22: Early blood-sucking\n  **/\nprivate iHealthDevicesCallback miHealthDevicesCallback = new iHealthDevicesCallback() {\n    @Override\n    public void onDeviceNotify(String mac, String deviceType, String action, String message) {\n        if (Bg1aProfile.ACTION_ERROR_BG1A.equals(action)) {\n           try {\n                JSONObject obj = new JSONObject(message);\n                int error_id          = obj.getInt(Bg1aProfile.ERROR_NUM_BG1A);\n                int error_description = obj.getInt(Bg1aProfile.ERROR_DESCRIPTION_BG1A);\n\n            } catch (JSONException e) {\n                e.printStackTrace();\n            }\n        } else if (iHealthDevicesManager.IHEALTH_COMM_TIMEOUT.equasls(action)) {\n            // Ble connection timeout, Please send the current command again.\n        }\n    } \n}\n")))}v.isMDXComponent=!0}}]);